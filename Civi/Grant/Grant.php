<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Grant/Grant.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Grant;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;

/**
 * Grant
 *
 * @ORM\Table(name="civicrm_grant", indexes={@ORM\Index(name="index_grant_type_id", columns={"grant_type_id"}),@ORM\Index(name="index_status_id", columns={"status_id"}),@ORM\Index(name="FK_civicrm_grant_contact_id", columns={"contact_id"}),@ORM\Index(name="FK_civicrm_grant_financial_type_id", columns={"financial_type_id"})})
 * @ORM\Entity
 */
class Grant extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var \Civi\Contact\Contact
   *
   * @ORM\ManyToOne(targetEntity="Civi\Contact\Contact")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="contact_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $contact;
  
  /**
   * @var date
   *
   * @ORM\Column(name="application_received_date", type="date", nullable=true)
   * 
   */
  private $applicationReceivedDate;
  
  /**
   * @var date
   *
   * @ORM\Column(name="decision_date", type="date", nullable=true)
   * 
   */
  private $decisionDate;
  
  /**
   * @var date
   *
   * @ORM\Column(name="money_transfer_date", type="date", nullable=true)
   * 
   */
  private $moneyTransferDate;
  
  /**
   * @var date
   *
   * @ORM\Column(name="grant_due_date", type="date", nullable=true)
   * 
   */
  private $grantDueDate;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="grant_report_received", type="boolean", nullable=true)
   * 
   */
  private $grantReportReceived;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="grant_type_id", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $grantTypeId;
  
  /**
   * @var float
   *
   * @ORM\Column(name="amount_total", type="float", nullable=true)
   * 
   */
  private $amountTotal;
  
  /**
   * @var float
   *
   * @ORM\Column(name="amount_requested", type="float", nullable=true)
   * 
   */
  private $amountRequested;
  
  /**
   * @var float
   *
   * @ORM\Column(name="amount_granted", type="float", nullable=true)
   * 
   */
  private $amountGranted;
  
  /**
   * @var string
   *
   * @ORM\Column(name="currency", type="string", length=3, nullable=true)
   * 
   */
  private $currency;
  
  /**
   * @var text
   *
   * @ORM\Column(name="rationale", type="text", nullable=true)
   * 
   */
  private $rationale;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="status_id", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $statusId;
  
  /**
   * @var \Civi\Financial\FinancialType
   *
   * @ORM\ManyToOne(targetEntity="Civi\Financial\FinancialType")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="financial_type_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $financialType = 'NULL';

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set contact
   *
   * @param \Civi\Contact\Contact $contact
   * @return Grant
   */
  public function setContact(\Civi\Contact\Contact $contact = null) {
    $this->contact = $contact;
    return $this;
  }

  /**
   * Get contact
   *
   * @return \Civi\Contact\Contact
   */
  public function getContact() {
    return $this->contact;
  }
  
  /**
   * Set applicationReceivedDate
   *
   * @param date $applicationReceivedDate
   * @return Grant
   */
  public function setApplicationReceivedDate($applicationReceivedDate) {
    $this->applicationReceivedDate = $applicationReceivedDate;
    return $this;
  }

  /**
   * Get applicationReceivedDate
   *
   * @return date
   */
  public function getApplicationReceivedDate() {
    return $this->applicationReceivedDate;
  }
  
  /**
   * Set decisionDate
   *
   * @param date $decisionDate
   * @return Grant
   */
  public function setDecisionDate($decisionDate) {
    $this->decisionDate = $decisionDate;
    return $this;
  }

  /**
   * Get decisionDate
   *
   * @return date
   */
  public function getDecisionDate() {
    return $this->decisionDate;
  }
  
  /**
   * Set moneyTransferDate
   *
   * @param date $moneyTransferDate
   * @return Grant
   */
  public function setMoneyTransferDate($moneyTransferDate) {
    $this->moneyTransferDate = $moneyTransferDate;
    return $this;
  }

  /**
   * Get moneyTransferDate
   *
   * @return date
   */
  public function getMoneyTransferDate() {
    return $this->moneyTransferDate;
  }
  
  /**
   * Set grantDueDate
   *
   * @param date $grantDueDate
   * @return Grant
   */
  public function setGrantDueDate($grantDueDate) {
    $this->grantDueDate = $grantDueDate;
    return $this;
  }

  /**
   * Get grantDueDate
   *
   * @return date
   */
  public function getGrantDueDate() {
    return $this->grantDueDate;
  }
  
  /**
   * Set grantReportReceived
   *
   * @param boolean $grantReportReceived
   * @return Grant
   */
  public function setGrantReportReceived($grantReportReceived) {
    $this->grantReportReceived = $grantReportReceived;
    return $this;
  }

  /**
   * Get grantReportReceived
   *
   * @return boolean
   */
  public function getGrantReportReceived() {
    return $this->grantReportReceived;
  }
  
  /**
   * Set grantTypeId
   *
   * @param integer $grantTypeId
   * @return Grant
   */
  public function setGrantTypeId($grantTypeId) {
    $this->grantTypeId = $grantTypeId;
    return $this;
  }

  /**
   * Get grantTypeId
   *
   * @return integer
   */
  public function getGrantTypeId() {
    return $this->grantTypeId;
  }
  
  /**
   * Set amountTotal
   *
   * @param float $amountTotal
   * @return Grant
   */
  public function setAmountTotal($amountTotal) {
    $this->amountTotal = $amountTotal;
    return $this;
  }

  /**
   * Get amountTotal
   *
   * @return float
   */
  public function getAmountTotal() {
    return $this->amountTotal;
  }
  
  /**
   * Set amountRequested
   *
   * @param float $amountRequested
   * @return Grant
   */
  public function setAmountRequested($amountRequested) {
    $this->amountRequested = $amountRequested;
    return $this;
  }

  /**
   * Get amountRequested
   *
   * @return float
   */
  public function getAmountRequested() {
    return $this->amountRequested;
  }
  
  /**
   * Set amountGranted
   *
   * @param float $amountGranted
   * @return Grant
   */
  public function setAmountGranted($amountGranted) {
    $this->amountGranted = $amountGranted;
    return $this;
  }

  /**
   * Get amountGranted
   *
   * @return float
   */
  public function getAmountGranted() {
    return $this->amountGranted;
  }
  
  /**
   * Set currency
   *
   * @param string $currency
   * @return Grant
   */
  public function setCurrency($currency) {
    $this->currency = $currency;
    return $this;
  }

  /**
   * Get currency
   *
   * @return string
   */
  public function getCurrency() {
    return $this->currency;
  }
  
  /**
   * Set rationale
   *
   * @param text $rationale
   * @return Grant
   */
  public function setRationale($rationale) {
    $this->rationale = $rationale;
    return $this;
  }

  /**
   * Get rationale
   *
   * @return text
   */
  public function getRationale() {
    return $this->rationale;
  }
  
  /**
   * Set statusId
   *
   * @param integer $statusId
   * @return Grant
   */
  public function setStatusId($statusId) {
    $this->statusId = $statusId;
    return $this;
  }

  /**
   * Get statusId
   *
   * @return integer
   */
  public function getStatusId() {
    return $this->statusId;
  }
  
  /**
   * Set financialType
   *
   * @param \Civi\Financial\FinancialType $financialType
   * @return Grant
   */
  public function setFinancialType(\Civi\Financial\FinancialType $financialType = null) {
    $this->financialType = $financialType;
    return $this;
  }

  /**
   * Get financialType
   *
   * @return \Civi\Financial\FinancialType
   */
  public function getFinancialType() {
    return $this->financialType;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
      
              'grant_id' => array(
      
        'name' => 'id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Grant ID'),
                        'required' => true,
                                             
                'import' => true,
        'where' => 'civicrm_grant.id',
        'headerPattern' => '',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'grant_contact_id' => array(
      
        'name' => 'contact_id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Contact ID'),
                        'required' => true,
                                             
                         'export' => true,
                'where' => 'civicrm_grant.contact_id',
        'headerPattern' => '',
        'dataPattern' => '',
                                   
                'FKClassName' => 'CRM_Contact_Contact',
                          ),
      
              'application_received_date' => array(
      
        'name' => 'application_received_date',
        'type' => CRM_Utils_Type::T_DATE,
                'title' => ts('Application received date'),
                                                     
                         'export' => true,
                'where' => 'civicrm_grant.application_received_date',
        'headerPattern' => '',
        'dataPattern' => '',
                                   
                          ),
      
              'decision_date' => array(
      
        'name' => 'decision_date',
        'type' => CRM_Utils_Type::T_DATE,
                'title' => ts('Decision date'),
                                                     
                'import' => true,
        'where' => 'civicrm_grant.decision_date',
        'headerPattern' => '',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'money_transfer_date' => array(
      
        'name' => 'money_transfer_date',
        'type' => CRM_Utils_Type::T_DATE,
                'title' => ts('Grant Money transfer date'),
                                                     
                'import' => true,
        'where' => 'civicrm_grant.money_transfer_date',
        'headerPattern' => '',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'grant_due_date' => array(
      
        'name' => 'grant_due_date',
        'type' => CRM_Utils_Type::T_DATE,
                'title' => ts('Grant Due Date'),
                                                     
                                    
                          ),
      
              'grant_report_received' => array(
      
        'name' => 'grant_report_received',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Grant report received'),
                                                     
                'import' => true,
        'where' => 'civicrm_grant.grant_report_received',
        'headerPattern' => '',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'grant_type_id' => array(
      
        'name' => 'grant_type_id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Grant Type'),
                        'required' => true,
                                             
                         'export' => false,
                'where' => 'civicrm_grant.grant_type_id',
        'headerPattern' => '',
        'dataPattern' => '',
                                   
                                     'pseudoconstant' => array(
                                'optionGroupName' => 'grant_type',
                    )
                 ),
      
              'amount_total' => array(
      
        'name' => 'amount_total',
        'type' => CRM_Utils_Type::T_MONEY,
                'title' => ts('Total Amount'),
                        'required' => true,
                                             
                'import' => true,
        'where' => 'civicrm_grant.amount_total',
        'headerPattern' => '',
        'dataPattern' => '/^\d+(\.\d{2})?$/',
                         'export' => true,
                                   
                          ),
      
              'amount_requested' => array(
      
        'name' => 'amount_requested',
        'type' => CRM_Utils_Type::T_MONEY,
                'title' => ts('Amount Requested'),
                                                     
                                    
                          ),
      
              'amount_granted' => array(
      
        'name' => 'amount_granted',
        'type' => CRM_Utils_Type::T_MONEY,
                'title' => ts('Amount granted'),
                                                     
                'import' => true,
        'where' => 'civicrm_grant.amount_granted',
        'headerPattern' => '',
        'dataPattern' => '/^\d+(\.\d{2})?$/',
                         'export' => true,
                                   
                          ),
      
              'currency' => array(
      
        'name' => 'currency',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Grant Currency'),
                        'required' => true,
                         'maxlength' => 3,
                         'size' => CRM_Utils_Type::FOUR,
                           
                                    
                                     'pseudoconstant' => array(
                                'table' => 'civicrm_currency',
                      'keyColumn' => 'name',
                      'labelColumn' => 'full_name',
                      'nameColumn' => 'numeric_code',
                    )
                 ),
      
              'rationale' => array(
      
        'name' => 'rationale',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Grant Rationale'),
                                                   'rows' => 4,
                         'cols' => 60,
         
                'import' => true,
        'where' => 'civicrm_grant.rationale',
        'headerPattern' => '',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'grant_status_id' => array(
      
        'name' => 'status_id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Grant Status'),
                        'required' => true,
                                             
                'import' => true,
        'where' => 'civicrm_grant.status_id',
        'headerPattern' => '',
        'dataPattern' => '',
                         'export' => false,
                                   
                                     'pseudoconstant' => array(
                                'optionGroupName' => 'grant_status',
                    )
                 ),
      
              'financial_type_id' => array(
      
        'name' => 'financial_type_id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Financial Type'),
                                                     
                                           'default' => 'NULL',
         
                'FKClassName' => 'CRM_Financial_FinancialType',
                          ),
             );
    }
    return self::$_fields;
  }

}

