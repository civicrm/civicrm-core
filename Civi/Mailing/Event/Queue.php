<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Mailing/Event/Queue.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Mailing\Event;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;

/**
 * Queue
 *
 * @ORM\Table(name="civicrm_mailing_event_queue", indexes={@ORM\Index(name="FK_civicrm_mailing_event_queue_job_id", columns={"job_id"}),@ORM\Index(name="FK_civicrm_mailing_event_queue_email_id", columns={"email_id"}),@ORM\Index(name="FK_civicrm_mailing_event_queue_contact_id", columns={"contact_id"}),@ORM\Index(name="FK_civicrm_mailing_event_queue_phone_id", columns={"phone_id"})})
 * @ORM\Entity
 */
class Queue extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var \Civi\Mailing\MailingJob
   *
   * @ORM\ManyToOne(targetEntity="Civi\Mailing\MailingJob")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="job_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $job;
  
  /**
   * @var \Civi\Core\Email
   *
   * @ORM\ManyToOne(targetEntity="Civi\Core\Email")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="email_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $email = 'NULL';
  
  /**
   * @var \Civi\Contact\Contact
   *
   * @ORM\ManyToOne(targetEntity="Civi\Contact\Contact")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="contact_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $contact;
  
  /**
   * @var string
   *
   * @ORM\Column(name="hash", type="string", length=255, nullable=true)
   * 
   */
  private $hash;
  
  /**
   * @var \Civi\Core\Phone
   *
   * @ORM\ManyToOne(targetEntity="Civi\Core\Phone")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="phone_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $phone = 'NULL';

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set job
   *
   * @param \Civi\Mailing\MailingJob $job
   * @return Queue
   */
  public function setJob(\Civi\Mailing\MailingJob $job = null) {
    $this->job = $job;
    return $this;
  }

  /**
   * Get job
   *
   * @return \Civi\Mailing\MailingJob
   */
  public function getJob() {
    return $this->job;
  }
  
  /**
   * Set email
   *
   * @param \Civi\Core\Email $email
   * @return Queue
   */
  public function setEmail(\Civi\Core\Email $email = null) {
    $this->email = $email;
    return $this;
  }

  /**
   * Get email
   *
   * @return \Civi\Core\Email
   */
  public function getEmail() {
    return $this->email;
  }
  
  /**
   * Set contact
   *
   * @param \Civi\Contact\Contact $contact
   * @return Queue
   */
  public function setContact(\Civi\Contact\Contact $contact = null) {
    $this->contact = $contact;
    return $this;
  }

  /**
   * Get contact
   *
   * @return \Civi\Contact\Contact
   */
  public function getContact() {
    return $this->contact;
  }
  
  /**
   * Set hash
   *
   * @param string $hash
   * @return Queue
   */
  public function setHash($hash) {
    $this->hash = $hash;
    return $this;
  }

  /**
   * Get hash
   *
   * @return string
   */
  public function getHash() {
    return $this->hash;
  }
  
  /**
   * Set phone
   *
   * @param \Civi\Core\Phone $phone
   * @return Queue
   */
  public function setPhone(\Civi\Core\Phone $phone = null) {
    $this->phone = $phone;
    return $this;
  }

  /**
   * Get phone
   *
   * @return \Civi\Core\Phone
   */
  public function getPhone() {
    return $this->phone;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
      
              'id' => array(
      
        'name' => 'id',
        'type' => CRM_Utils_Type::T_INT,
                        'required' => true,
                                             
                                    
                          ),
      
              'job_id' => array(
      
        'name' => 'job_id',
        'type' => CRM_Utils_Type::T_INT,
                        'required' => true,
                                             
                                    
                'FKClassName' => 'CRM_Mailing_MailingJob',
                          ),
      
              'email_id' => array(
      
        'name' => 'email_id',
        'type' => CRM_Utils_Type::T_INT,
                                                     
                                           'default' => 'NULL',
         
                'FKClassName' => 'CRM_Core_Email',
                          ),
      
              'contact_id' => array(
      
        'name' => 'contact_id',
        'type' => CRM_Utils_Type::T_INT,
                        'required' => true,
                                             
                                    
                'FKClassName' => 'CRM_Contact_Contact',
                          ),
      
              'hash' => array(
      
        'name' => 'hash',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Hash'),
                        'required' => true,
                         'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'phone_id' => array(
      
        'name' => 'phone_id',
        'type' => CRM_Utils_Type::T_INT,
                                                     
                                           'default' => 'NULL',
         
                'FKClassName' => 'CRM_Core_Phone',
                          ),
             );
    }
    return self::$_fields;
  }

}

