<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Event/Participant.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Core;

use Doctrine\ORM\Mapping as ORM;

/**
 * Participant
 *
 * @ORM\Table(name="civicrm_participant", indexes={@ORM\Index(name="index_status_id", columns={"status_id"}),@ORM\Index(name="index_role_id", columns={"role_id"}),@ORM\Index(name="FK_civicrm_participant_contact_id", columns={"contact_id"}),@ORM\Index(name="FK_civicrm_participant_event_id", columns={"event_id"}),@ORM\Index(name="FK_civicrm_participant_status_id", columns={"status_id"}),@ORM\Index(name="FK_civicrm_participant_registered_by_id", columns={"registered_by_id"}),@ORM\Index(name="FK_civicrm_participant_discount_id", columns={"discount_id"}),@ORM\Index(name="FK_civicrm_participant_campaign_id", columns={"campaign_id"}),@ORM\Index(name="FK_civicrm_participant_cart_id", columns={"cart_id"})})
 * @ORM\Entity
 */
class Participant extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false)
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var \Civi\Contact\Contact
   *
   * @ORM\ManyToOne(targetEntity="Civi\Contact\Contact")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="contact_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $contact;
  
  /**
   * @var \Civi\Event\Event
   *
   * @ORM\ManyToOne(targetEntity="Civi\Event\Event")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="event_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $event;
  
  /**
   * @var \Civi\Event\ParticipantStatusType
   *
   * @ORM\ManyToOne(targetEntity="Civi\Event\ParticipantStatusType")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="status_id", referencedColumnName="id")})
   */
  private $status = '1';
  
  /**
   * @var string
   *
   * @ORM\Column(name="role_id", type="string", length=128, nullable=false)
   * 
   */
  private $roleId = 'NULL';
  
  /**
   * @var datetime
   *
   * @ORM\Column(name="register_date", type="datetime", nullable=true)
   * 
   */
  private $registerDate;
  
  /**
   * @var string
   *
   * @ORM\Column(name="source", type="string", length=128, nullable=true)
   * 
   */
  private $source;
  
  /**
   * @var text
   *
   * @ORM\Column(name="fee_level", type="text", nullable=true)
   * 
   */
  private $feeLevel;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_test", type="boolean", nullable=false)
   * 
   */
  private $isTest = '0';
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_pay_later", type="boolean", nullable=false)
   * 
   */
  private $isPayLater = '0';
  
  /**
   * @var float
   *
   * @ORM\Column(name="fee_amount", type="float", nullable=true)
   * 
   */
  private $feeAmount;
  
  /**
   * @var \Civi\Event\Participant
   *
   * @ORM\ManyToOne(targetEntity="Civi\Event\Participant")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="registered_by_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $registeredBy = 'NULL';
  
  /**
   * @var \Civi\Core\Discount
   *
   * @ORM\ManyToOne(targetEntity="Civi\Core\Discount")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="discount_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $discount = 'NULL';
  
  /**
   * @var string
   *
   * @ORM\Column(name="fee_currency", type="string", length=3, nullable=false)
   * 
   */
  private $feeCurrency = 'NULL';
  
  /**
   * @var \Civi\Campaign\Campaign
   *
   * @ORM\ManyToOne(targetEntity="Civi\Campaign\Campaign")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="campaign_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $campaign;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="discount_amount", type="integer", nullable=true)
   * 
   */
  private $discountAmount;
  
  /**
   * @var \Civi\Event\Cart\Cart
   *
   * @ORM\ManyToOne(targetEntity="Civi\Event\Cart\Cart")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="cart_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $cart;
  
  /**
   * @var int
   *
   * @ORM\Column(name="must_wait", type="int", nullable=true)
   * 
   */
  private $mustWait;

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set contact
   *
   * @param \Civi\Contact\Contact $contact
   * @return Participant
   */
  public function setContact(\Civi\Contact\Contact $contact = null) {
    $this->contact = $contact;
    return $this;
  }

  /**
   * Get contact
   *
   * @return \Civi\Contact\Contact
   */
  public function getContact() {
    return $this->contact;
  }
  
  /**
   * Set event
   *
   * @param \Civi\Event\Event $event
   * @return Participant
   */
  public function setEvent(\Civi\Event\Event $event = null) {
    $this->event = $event;
    return $this;
  }

  /**
   * Get event
   *
   * @return \Civi\Event\Event
   */
  public function getEvent() {
    return $this->event;
  }
  
  /**
   * Set status
   *
   * @param \Civi\Event\ParticipantStatusType $status
   * @return Participant
   */
  public function setStatus(\Civi\Event\ParticipantStatusType $status = null) {
    $this->status = $status;
    return $this;
  }

  /**
   * Get status
   *
   * @return \Civi\Event\ParticipantStatusType
   */
  public function getStatus() {
    return $this->status;
  }
  
  /**
   * Set roleId
   *
   * @param string $roleId
   * @return Participant
   */
  public function setRoleId($roleId) {
    $this->roleId = $roleId;
    return $this;
  }

  /**
   * Get roleId
   *
   * @return string
   */
  public function getRoleId() {
    return $this->roleId;
  }
  
  /**
   * Set registerDate
   *
   * @param datetime $registerDate
   * @return Participant
   */
  public function setRegisterDate($registerDate) {
    $this->registerDate = $registerDate;
    return $this;
  }

  /**
   * Get registerDate
   *
   * @return datetime
   */
  public function getRegisterDate() {
    return $this->registerDate;
  }
  
  /**
   * Set source
   *
   * @param string $source
   * @return Participant
   */
  public function setSource($source) {
    $this->source = $source;
    return $this;
  }

  /**
   * Get source
   *
   * @return string
   */
  public function getSource() {
    return $this->source;
  }
  
  /**
   * Set feeLevel
   *
   * @param text $feeLevel
   * @return Participant
   */
  public function setFeeLevel($feeLevel) {
    $this->feeLevel = $feeLevel;
    return $this;
  }

  /**
   * Get feeLevel
   *
   * @return text
   */
  public function getFeeLevel() {
    return $this->feeLevel;
  }
  
  /**
   * Set isTest
   *
   * @param boolean $isTest
   * @return Participant
   */
  public function setIsTest($isTest) {
    $this->isTest = $isTest;
    return $this;
  }

  /**
   * Get isTest
   *
   * @return boolean
   */
  public function getIsTest() {
    return $this->isTest;
  }
  
  /**
   * Set isPayLater
   *
   * @param boolean $isPayLater
   * @return Participant
   */
  public function setIsPayLater($isPayLater) {
    $this->isPayLater = $isPayLater;
    return $this;
  }

  /**
   * Get isPayLater
   *
   * @return boolean
   */
  public function getIsPayLater() {
    return $this->isPayLater;
  }
  
  /**
   * Set feeAmount
   *
   * @param float $feeAmount
   * @return Participant
   */
  public function setFeeAmount($feeAmount) {
    $this->feeAmount = $feeAmount;
    return $this;
  }

  /**
   * Get feeAmount
   *
   * @return float
   */
  public function getFeeAmount() {
    return $this->feeAmount;
  }
  
  /**
   * Set registeredBy
   *
   * @param \Civi\Event\Participant $registeredBy
   * @return Participant
   */
  public function setRegisteredBy(\Civi\Event\Participant $registeredBy = null) {
    $this->registeredBy = $registeredBy;
    return $this;
  }

  /**
   * Get registeredBy
   *
   * @return \Civi\Event\Participant
   */
  public function getRegisteredBy() {
    return $this->registeredBy;
  }
  
  /**
   * Set discount
   *
   * @param \Civi\Core\Discount $discount
   * @return Participant
   */
  public function setDiscount(\Civi\Core\Discount $discount = null) {
    $this->discount = $discount;
    return $this;
  }

  /**
   * Get discount
   *
   * @return \Civi\Core\Discount
   */
  public function getDiscount() {
    return $this->discount;
  }
  
  /**
   * Set feeCurrency
   *
   * @param string $feeCurrency
   * @return Participant
   */
  public function setFeeCurrency($feeCurrency) {
    $this->feeCurrency = $feeCurrency;
    return $this;
  }

  /**
   * Get feeCurrency
   *
   * @return string
   */
  public function getFeeCurrency() {
    return $this->feeCurrency;
  }
  
  /**
   * Set campaign
   *
   * @param \Civi\Campaign\Campaign $campaign
   * @return Participant
   */
  public function setCampaign(\Civi\Campaign\Campaign $campaign = null) {
    $this->campaign = $campaign;
    return $this;
  }

  /**
   * Get campaign
   *
   * @return \Civi\Campaign\Campaign
   */
  public function getCampaign() {
    return $this->campaign;
  }
  
  /**
   * Set discountAmount
   *
   * @param integer $discountAmount
   * @return Participant
   */
  public function setDiscountAmount($discountAmount) {
    $this->discountAmount = $discountAmount;
    return $this;
  }

  /**
   * Get discountAmount
   *
   * @return integer
   */
  public function getDiscountAmount() {
    return $this->discountAmount;
  }
  
  /**
   * Set cart
   *
   * @param \Civi\Event\Cart\Cart $cart
   * @return Participant
   */
  public function setCart(\Civi\Event\Cart\Cart $cart = null) {
    $this->cart = $cart;
    return $this;
  }

  /**
   * Get cart
   *
   * @return \Civi\Event\Cart\Cart
   */
  public function getCart() {
    return $this->cart;
  }
  
  /**
   * Set mustWait
   *
   * @param int $mustWait
   * @return Participant
   */
  public function setMustWait($mustWait) {
    $this->mustWait = $mustWait;
    return $this;
  }

  /**
   * Get mustWait
   *
   * @return int
   */
  public function getMustWait() {
    return $this->mustWait;
  }

}

