<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Contact/DashboardContact.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Core;

use Doctrine\ORM\Mapping as ORM;

/**
 * DashboardContact
 *
 * @ORM\Table(name="civicrm_dashboard_contact", indexes={@ORM\Index(name="FK_civicrm_dashboard_contact_dashboard_id", columns={"dashboard_id"}),@ORM\Index(name="FK_civicrm_dashboard_contact_contact_id", columns={"contact_id"})})
 * @ORM\Entity
 */
class DashboardContact extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false)
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var \Civi\Core\Dashboard
   *
   * @ORM\ManyToOne(targetEntity="Civi\Core\Dashboard")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="dashboard_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $dashboard;
  
  /**
   * @var \Civi\Contact\Contact
   *
   * @ORM\ManyToOne(targetEntity="Civi\Contact\Contact")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="contact_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $contact;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="column_no", type="boolean", nullable=false)
   * 
   */
  private $columnNo = '0';
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_minimized", type="boolean", nullable=false)
   * 
   */
  private $isMinimized = '0';
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_fullscreen", type="boolean", nullable=false)
   * 
   */
  private $isFullscreen = '1';
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_active", type="boolean", nullable=false)
   * 
   */
  private $isActive = '0';
  
  /**
   * @var int
   *
   * @ORM\Column(name="weight", type="int", nullable=false)
   * 
   */
  private $weight = '0';
  
  /**
   * @var longtext
   *
   * @ORM\Column(name="content", type="longtext", nullable=true)
   * 
   */
  private $content;
  
  /**
   * @var datetime
   *
   * @ORM\Column(name="created_date", type="datetime", nullable=true)
   * 
   */
  private $createdDate;

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set dashboard
   *
   * @param \Civi\Core\Dashboard $dashboard
   * @return DashboardContact
   */
  public function setDashboard(\Civi\Core\Dashboard $dashboard = null) {
    $this->dashboard = $dashboard;
    return $this;
  }

  /**
   * Get dashboard
   *
   * @return \Civi\Core\Dashboard
   */
  public function getDashboard() {
    return $this->dashboard;
  }
  
  /**
   * Set contact
   *
   * @param \Civi\Contact\Contact $contact
   * @return DashboardContact
   */
  public function setContact(\Civi\Contact\Contact $contact = null) {
    $this->contact = $contact;
    return $this;
  }

  /**
   * Get contact
   *
   * @return \Civi\Contact\Contact
   */
  public function getContact() {
    return $this->contact;
  }
  
  /**
   * Set columnNo
   *
   * @param boolean $columnNo
   * @return DashboardContact
   */
  public function setColumnNo($columnNo) {
    $this->columnNo = $columnNo;
    return $this;
  }

  /**
   * Get columnNo
   *
   * @return boolean
   */
  public function getColumnNo() {
    return $this->columnNo;
  }
  
  /**
   * Set isMinimized
   *
   * @param boolean $isMinimized
   * @return DashboardContact
   */
  public function setIsMinimized($isMinimized) {
    $this->isMinimized = $isMinimized;
    return $this;
  }

  /**
   * Get isMinimized
   *
   * @return boolean
   */
  public function getIsMinimized() {
    return $this->isMinimized;
  }
  
  /**
   * Set isFullscreen
   *
   * @param boolean $isFullscreen
   * @return DashboardContact
   */
  public function setIsFullscreen($isFullscreen) {
    $this->isFullscreen = $isFullscreen;
    return $this;
  }

  /**
   * Get isFullscreen
   *
   * @return boolean
   */
  public function getIsFullscreen() {
    return $this->isFullscreen;
  }
  
  /**
   * Set isActive
   *
   * @param boolean $isActive
   * @return DashboardContact
   */
  public function setIsActive($isActive) {
    $this->isActive = $isActive;
    return $this;
  }

  /**
   * Get isActive
   *
   * @return boolean
   */
  public function getIsActive() {
    return $this->isActive;
  }
  
  /**
   * Set weight
   *
   * @param int $weight
   * @return DashboardContact
   */
  public function setWeight($weight) {
    $this->weight = $weight;
    return $this;
  }

  /**
   * Get weight
   *
   * @return int
   */
  public function getWeight() {
    return $this->weight;
  }
  
  /**
   * Set content
   *
   * @param longtext $content
   * @return DashboardContact
   */
  public function setContent($content) {
    $this->content = $content;
    return $this;
  }

  /**
   * Get content
   *
   * @return longtext
   */
  public function getContent() {
    return $this->content;
  }
  
  /**
   * Set createdDate
   *
   * @param datetime $createdDate
   * @return DashboardContact
   */
  public function setCreatedDate($createdDate) {
    $this->createdDate = $createdDate;
    return $this;
  }

  /**
   * Get createdDate
   *
   * @return datetime
   */
  public function getCreatedDate() {
    return $this->createdDate;
  }

}

