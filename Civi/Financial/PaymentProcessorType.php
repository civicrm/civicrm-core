<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Financial/PaymentProcessorType.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Financial;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;

/**
 * PaymentProcessorType
 *
 * @ORM\Table(name="civicrm_payment_processor_type", uniqueConstraints={@ORM\UniqueConstraint(name="UI_name", columns={"name"})})
 * @ORM\Entity
 */
class PaymentProcessorType extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var string
   *
   * @ORM\Column(name="name", type="string", length=64, nullable=true)
   * 
   */
  private $name;
  
  /**
   * @var string
   *
   * @ORM\Column(name="title", type="string", length=127, nullable=true)
   * 
   */
  private $title;
  
  /**
   * @var string
   *
   * @ORM\Column(name="description", type="string", length=255, nullable=true)
   * 
   */
  private $description;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_active", type="boolean", nullable=true)
   * 
   */
  private $isActive;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_default", type="boolean", nullable=true)
   * 
   */
  private $isDefault;
  
  /**
   * @var string
   *
   * @ORM\Column(name="user_name_label", type="string", length=255, nullable=true)
   * 
   */
  private $userNameLabel;
  
  /**
   * @var string
   *
   * @ORM\Column(name="password_label", type="string", length=255, nullable=true)
   * 
   */
  private $passwordLabel;
  
  /**
   * @var string
   *
   * @ORM\Column(name="signature_label", type="string", length=255, nullable=true)
   * 
   */
  private $signatureLabel;
  
  /**
   * @var string
   *
   * @ORM\Column(name="subject_label", type="string", length=255, nullable=true)
   * 
   */
  private $subjectLabel;
  
  /**
   * @var string
   *
   * @ORM\Column(name="class_name", type="string", length=255, nullable=true)
   * 
   */
  private $className;
  
  /**
   * @var string
   *
   * @ORM\Column(name="url_site_default", type="string", length=255, nullable=true)
   * 
   */
  private $urlSiteDefault;
  
  /**
   * @var string
   *
   * @ORM\Column(name="url_api_default", type="string", length=255, nullable=true)
   * 
   */
  private $urlApiDefault;
  
  /**
   * @var string
   *
   * @ORM\Column(name="url_recur_default", type="string", length=255, nullable=true)
   * 
   */
  private $urlRecurDefault;
  
  /**
   * @var string
   *
   * @ORM\Column(name="url_button_default", type="string", length=255, nullable=true)
   * 
   */
  private $urlButtonDefault;
  
  /**
   * @var string
   *
   * @ORM\Column(name="url_site_test_default", type="string", length=255, nullable=true)
   * 
   */
  private $urlSiteTestDefault;
  
  /**
   * @var string
   *
   * @ORM\Column(name="url_api_test_default", type="string", length=255, nullable=true)
   * 
   */
  private $urlApiTestDefault;
  
  /**
   * @var string
   *
   * @ORM\Column(name="url_recur_test_default", type="string", length=255, nullable=true)
   * 
   */
  private $urlRecurTestDefault;
  
  /**
   * @var string
   *
   * @ORM\Column(name="url_button_test_default", type="string", length=255, nullable=true)
   * 
   */
  private $urlButtonTestDefault;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="billing_mode", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $billingMode;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_recur", type="boolean", nullable=true)
   * 
   */
  private $isRecur;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="payment_type", type="integer", nullable=false, options={"unsigned":true})
   * 
   */
  private $paymentType = '1';

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set name
   *
   * @param string $name
   * @return PaymentProcessorType
   */
  public function setName($name) {
    $this->name = $name;
    return $this;
  }

  /**
   * Get name
   *
   * @return string
   */
  public function getName() {
    return $this->name;
  }
  
  /**
   * Set title
   *
   * @param string $title
   * @return PaymentProcessorType
   */
  public function setTitle($title) {
    $this->title = $title;
    return $this;
  }

  /**
   * Get title
   *
   * @return string
   */
  public function getTitle() {
    return $this->title;
  }
  
  /**
   * Set description
   *
   * @param string $description
   * @return PaymentProcessorType
   */
  public function setDescription($description) {
    $this->description = $description;
    return $this;
  }

  /**
   * Get description
   *
   * @return string
   */
  public function getDescription() {
    return $this->description;
  }
  
  /**
   * Set isActive
   *
   * @param boolean $isActive
   * @return PaymentProcessorType
   */
  public function setIsActive($isActive) {
    $this->isActive = $isActive;
    return $this;
  }

  /**
   * Get isActive
   *
   * @return boolean
   */
  public function getIsActive() {
    return $this->isActive;
  }
  
  /**
   * Set isDefault
   *
   * @param boolean $isDefault
   * @return PaymentProcessorType
   */
  public function setIsDefault($isDefault) {
    $this->isDefault = $isDefault;
    return $this;
  }

  /**
   * Get isDefault
   *
   * @return boolean
   */
  public function getIsDefault() {
    return $this->isDefault;
  }
  
  /**
   * Set userNameLabel
   *
   * @param string $userNameLabel
   * @return PaymentProcessorType
   */
  public function setUserNameLabel($userNameLabel) {
    $this->userNameLabel = $userNameLabel;
    return $this;
  }

  /**
   * Get userNameLabel
   *
   * @return string
   */
  public function getUserNameLabel() {
    return $this->userNameLabel;
  }
  
  /**
   * Set passwordLabel
   *
   * @param string $passwordLabel
   * @return PaymentProcessorType
   */
  public function setPasswordLabel($passwordLabel) {
    $this->passwordLabel = $passwordLabel;
    return $this;
  }

  /**
   * Get passwordLabel
   *
   * @return string
   */
  public function getPasswordLabel() {
    return $this->passwordLabel;
  }
  
  /**
   * Set signatureLabel
   *
   * @param string $signatureLabel
   * @return PaymentProcessorType
   */
  public function setSignatureLabel($signatureLabel) {
    $this->signatureLabel = $signatureLabel;
    return $this;
  }

  /**
   * Get signatureLabel
   *
   * @return string
   */
  public function getSignatureLabel() {
    return $this->signatureLabel;
  }
  
  /**
   * Set subjectLabel
   *
   * @param string $subjectLabel
   * @return PaymentProcessorType
   */
  public function setSubjectLabel($subjectLabel) {
    $this->subjectLabel = $subjectLabel;
    return $this;
  }

  /**
   * Get subjectLabel
   *
   * @return string
   */
  public function getSubjectLabel() {
    return $this->subjectLabel;
  }
  
  /**
   * Set className
   *
   * @param string $className
   * @return PaymentProcessorType
   */
  public function setClassName($className) {
    $this->className = $className;
    return $this;
  }

  /**
   * Get className
   *
   * @return string
   */
  public function getClassName() {
    return $this->className;
  }
  
  /**
   * Set urlSiteDefault
   *
   * @param string $urlSiteDefault
   * @return PaymentProcessorType
   */
  public function setUrlSiteDefault($urlSiteDefault) {
    $this->urlSiteDefault = $urlSiteDefault;
    return $this;
  }

  /**
   * Get urlSiteDefault
   *
   * @return string
   */
  public function getUrlSiteDefault() {
    return $this->urlSiteDefault;
  }
  
  /**
   * Set urlApiDefault
   *
   * @param string $urlApiDefault
   * @return PaymentProcessorType
   */
  public function setUrlApiDefault($urlApiDefault) {
    $this->urlApiDefault = $urlApiDefault;
    return $this;
  }

  /**
   * Get urlApiDefault
   *
   * @return string
   */
  public function getUrlApiDefault() {
    return $this->urlApiDefault;
  }
  
  /**
   * Set urlRecurDefault
   *
   * @param string $urlRecurDefault
   * @return PaymentProcessorType
   */
  public function setUrlRecurDefault($urlRecurDefault) {
    $this->urlRecurDefault = $urlRecurDefault;
    return $this;
  }

  /**
   * Get urlRecurDefault
   *
   * @return string
   */
  public function getUrlRecurDefault() {
    return $this->urlRecurDefault;
  }
  
  /**
   * Set urlButtonDefault
   *
   * @param string $urlButtonDefault
   * @return PaymentProcessorType
   */
  public function setUrlButtonDefault($urlButtonDefault) {
    $this->urlButtonDefault = $urlButtonDefault;
    return $this;
  }

  /**
   * Get urlButtonDefault
   *
   * @return string
   */
  public function getUrlButtonDefault() {
    return $this->urlButtonDefault;
  }
  
  /**
   * Set urlSiteTestDefault
   *
   * @param string $urlSiteTestDefault
   * @return PaymentProcessorType
   */
  public function setUrlSiteTestDefault($urlSiteTestDefault) {
    $this->urlSiteTestDefault = $urlSiteTestDefault;
    return $this;
  }

  /**
   * Get urlSiteTestDefault
   *
   * @return string
   */
  public function getUrlSiteTestDefault() {
    return $this->urlSiteTestDefault;
  }
  
  /**
   * Set urlApiTestDefault
   *
   * @param string $urlApiTestDefault
   * @return PaymentProcessorType
   */
  public function setUrlApiTestDefault($urlApiTestDefault) {
    $this->urlApiTestDefault = $urlApiTestDefault;
    return $this;
  }

  /**
   * Get urlApiTestDefault
   *
   * @return string
   */
  public function getUrlApiTestDefault() {
    return $this->urlApiTestDefault;
  }
  
  /**
   * Set urlRecurTestDefault
   *
   * @param string $urlRecurTestDefault
   * @return PaymentProcessorType
   */
  public function setUrlRecurTestDefault($urlRecurTestDefault) {
    $this->urlRecurTestDefault = $urlRecurTestDefault;
    return $this;
  }

  /**
   * Get urlRecurTestDefault
   *
   * @return string
   */
  public function getUrlRecurTestDefault() {
    return $this->urlRecurTestDefault;
  }
  
  /**
   * Set urlButtonTestDefault
   *
   * @param string $urlButtonTestDefault
   * @return PaymentProcessorType
   */
  public function setUrlButtonTestDefault($urlButtonTestDefault) {
    $this->urlButtonTestDefault = $urlButtonTestDefault;
    return $this;
  }

  /**
   * Get urlButtonTestDefault
   *
   * @return string
   */
  public function getUrlButtonTestDefault() {
    return $this->urlButtonTestDefault;
  }
  
  /**
   * Set billingMode
   *
   * @param integer $billingMode
   * @return PaymentProcessorType
   */
  public function setBillingMode($billingMode) {
    $this->billingMode = $billingMode;
    return $this;
  }

  /**
   * Get billingMode
   *
   * @return integer
   */
  public function getBillingMode() {
    return $this->billingMode;
  }
  
  /**
   * Set isRecur
   *
   * @param boolean $isRecur
   * @return PaymentProcessorType
   */
  public function setIsRecur($isRecur) {
    $this->isRecur = $isRecur;
    return $this;
  }

  /**
   * Get isRecur
   *
   * @return boolean
   */
  public function getIsRecur() {
    return $this->isRecur;
  }
  
  /**
   * Set paymentType
   *
   * @param integer $paymentType
   * @return PaymentProcessorType
   */
  public function setPaymentType($paymentType) {
    $this->paymentType = $paymentType;
    return $this;
  }

  /**
   * Get paymentType
   *
   * @return integer
   */
  public function getPaymentType() {
    return $this->paymentType;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
      
              'id' => array(
      
        'name' => 'id',
        'type' => CRM_Utils_Type::T_INT,
                        'required' => true,
                                             
                                    
                          ),
      
              'name' => array(
      
        'name' => 'name',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Payment Processor variable name to be used in code'),
                                 'maxlength' => 64,
                         'size' => CRM_Utils_Type::BIG,
                           
                                    
                          ),
      
              'title' => array(
      
        'name' => 'title',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Payment Processor Title'),
                                 'maxlength' => 127,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'description' => array(
      
        'name' => 'description',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Description'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'is_active' => array(
      
        'name' => 'is_active',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                                                     
                                    
                          ),
      
              'is_default' => array(
      
        'name' => 'is_default',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                                                     
                                    
                          ),
      
              'user_name_label' => array(
      
        'name' => 'user_name_label',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Label for User Name if used'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'password_label' => array(
      
        'name' => 'password_label',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Label for password'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'signature_label' => array(
      
        'name' => 'signature_label',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Label for Signature'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'subject_label' => array(
      
        'name' => 'subject_label',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Label for Subject'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'class_name' => array(
      
        'name' => 'class_name',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Suffix for PHP clas name implementation'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'url_site_default' => array(
      
        'name' => 'url_site_default',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Default Live Site URL'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'url_api_default' => array(
      
        'name' => 'url_api_default',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Default API Site URL'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'url_recur_default' => array(
      
        'name' => 'url_recur_default',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Default Live Recurring Payments URL'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'url_button_default' => array(
      
        'name' => 'url_button_default',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Default Live Button URL'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'url_site_test_default' => array(
      
        'name' => 'url_site_test_default',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Default Test Site URL'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'url_api_test_default' => array(
      
        'name' => 'url_api_test_default',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Default Test API URL'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'url_recur_test_default' => array(
      
        'name' => 'url_recur_test_default',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Default Test Recurring Payment URL'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'url_button_test_default' => array(
      
        'name' => 'url_button_test_default',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Default Test Button URL'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'billing_mode' => array(
      
        'name' => 'billing_mode',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Billing Mode'),
                        'required' => true,
                                             
                                    
                                     'pseudoconstant' => array(
                                '0' => 'not in database',
                    )
                 ),
      
              'is_recur' => array(
      
        'name' => 'is_recur',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                                                     
                                    
                          ),
      
              'payment_type' => array(
      
        'name' => 'payment_type',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Payment Type'),
                                                     
                                           'default' => '1',
         
                          ),
             );
    }
    return self::$_fields;
  }

}

