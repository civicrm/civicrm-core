<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Core/PrintLabel.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Core;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;

/**
 * PrintLabel
 *
 * @ORM\Table(name="civicrm_print_label", indexes={@ORM\Index(name="FK_civicrm_print_label_created_id", columns={"created_id"})})
 * @ORM\Entity
 */
class PrintLabel extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var string
   *
   * @ORM\Column(name="title", type="string", length=255, nullable=true)
   * 
   */
  private $title;
  
  /**
   * @var string
   *
   * @ORM\Column(name="name", type="string", length=255, nullable=true)
   * 
   */
  private $name;
  
  /**
   * @var text
   *
   * @ORM\Column(name="description", type="text", nullable=true)
   * 
   */
  private $description;
  
  /**
   * @var string
   *
   * @ORM\Column(name="label_format_name", type="string", length=255, nullable=true)
   * 
   */
  private $labelFormatName;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="label_type_id", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $labelTypeId;
  
  /**
   * @var text
   *
   * @ORM\Column(name="data", type="text", nullable=true)
   * 
   */
  private $data;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_default", type="boolean", nullable=false)
   * 
   */
  private $isDefault = '1';
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_active", type="boolean", nullable=false)
   * 
   */
  private $isActive = '1';
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_reserved", type="boolean", nullable=false)
   * 
   */
  private $isReserved = '1';
  
  /**
   * @var \Civi\Contact\Contact
   *
   * @ORM\ManyToOne(targetEntity="Civi\Contact\Contact")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="created_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $created;

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set title
   *
   * @param string $title
   * @return PrintLabel
   */
  public function setTitle($title) {
    $this->title = $title;
    return $this;
  }

  /**
   * Get title
   *
   * @return string
   */
  public function getTitle() {
    return $this->title;
  }
  
  /**
   * Set name
   *
   * @param string $name
   * @return PrintLabel
   */
  public function setName($name) {
    $this->name = $name;
    return $this;
  }

  /**
   * Get name
   *
   * @return string
   */
  public function getName() {
    return $this->name;
  }
  
  /**
   * Set description
   *
   * @param text $description
   * @return PrintLabel
   */
  public function setDescription($description) {
    $this->description = $description;
    return $this;
  }

  /**
   * Get description
   *
   * @return text
   */
  public function getDescription() {
    return $this->description;
  }
  
  /**
   * Set labelFormatName
   *
   * @param string $labelFormatName
   * @return PrintLabel
   */
  public function setLabelFormatName($labelFormatName) {
    $this->labelFormatName = $labelFormatName;
    return $this;
  }

  /**
   * Get labelFormatName
   *
   * @return string
   */
  public function getLabelFormatName() {
    return $this->labelFormatName;
  }
  
  /**
   * Set labelTypeId
   *
   * @param integer $labelTypeId
   * @return PrintLabel
   */
  public function setLabelTypeId($labelTypeId) {
    $this->labelTypeId = $labelTypeId;
    return $this;
  }

  /**
   * Get labelTypeId
   *
   * @return integer
   */
  public function getLabelTypeId() {
    return $this->labelTypeId;
  }
  
  /**
   * Set data
   *
   * @param text $data
   * @return PrintLabel
   */
  public function setData($data) {
    $this->data = $data;
    return $this;
  }

  /**
   * Get data
   *
   * @return text
   */
  public function getData() {
    return $this->data;
  }
  
  /**
   * Set isDefault
   *
   * @param boolean $isDefault
   * @return PrintLabel
   */
  public function setIsDefault($isDefault) {
    $this->isDefault = $isDefault;
    return $this;
  }

  /**
   * Get isDefault
   *
   * @return boolean
   */
  public function getIsDefault() {
    return $this->isDefault;
  }
  
  /**
   * Set isActive
   *
   * @param boolean $isActive
   * @return PrintLabel
   */
  public function setIsActive($isActive) {
    $this->isActive = $isActive;
    return $this;
  }

  /**
   * Get isActive
   *
   * @return boolean
   */
  public function getIsActive() {
    return $this->isActive;
  }
  
  /**
   * Set isReserved
   *
   * @param boolean $isReserved
   * @return PrintLabel
   */
  public function setIsReserved($isReserved) {
    $this->isReserved = $isReserved;
    return $this;
  }

  /**
   * Get isReserved
   *
   * @return boolean
   */
  public function getIsReserved() {
    return $this->isReserved;
  }
  
  /**
   * Set created
   *
   * @param \Civi\Contact\Contact $created
   * @return PrintLabel
   */
  public function setCreated(\Civi\Contact\Contact $created = null) {
    $this->created = $created;
    return $this;
  }

  /**
   * Get created
   *
   * @return \Civi\Contact\Contact
   */
  public function getCreated() {
    return $this->created;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
      
              'id' => array(
      
        'name' => 'id',
        'type' => CRM_Utils_Type::T_INT,
                        'required' => true,
                                             
                                    
                          ),
      
              'title' => array(
      
        'name' => 'title',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Title'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'name' => array(
      
        'name' => 'name',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Name'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'description' => array(
      
        'name' => 'description',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Description'),
                                                     
                                    
                          ),
      
              'label_format_name' => array(
      
        'name' => 'label_format_name',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Label Format Name'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                                     'pseudoconstant' => array(
                                'optionGroupName' => 'name_badge',
                    )
                 ),
      
              'label_type_id' => array(
      
        'name' => 'label_type_id',
        'type' => CRM_Utils_Type::T_INT,
                                                     
                                    
                                     'pseudoconstant' => array(
                                'optionGroupName' => 'label_type',
                    )
                 ),
      
              'data' => array(
      
        'name' => 'data',
        'type' => CRM_Utils_Type::T_LONGTEXT,
                'title' => ts('Data'),
                                                     
                                    
                          ),
      
              'is_default' => array(
      
        'name' => 'is_default',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                                                     
                                           'default' => '1',
         
                          ),
      
              'is_active' => array(
      
        'name' => 'is_active',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                                                     
                                           'default' => '1',
         
                          ),
      
              'is_reserved' => array(
      
        'name' => 'is_reserved',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                                                     
                                           'default' => '1',
         
                          ),
      
              'created_id' => array(
      
        'name' => 'created_id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Created By Contact ID'),
                                                     
                                    
                'FKClassName' => 'CRM_Contact_Contact',
                          ),
             );
    }
    return self::$_fields;
  }

}

