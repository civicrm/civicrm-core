<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Core/Country.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Core;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;

/**
 * Country
 *
 * @ORM\Table(name="civicrm_country", uniqueConstraints={@ORM\UniqueConstraint(name="UI_name_iso_code", columns={"name","iso_code"})}, indexes={@ORM\Index(name="FK_civicrm_country_address_format_id", columns={"address_format_id"}),@ORM\Index(name="FK_civicrm_country_region_id", columns={"region_id"})})
 * @ORM\Entity
 */
class Country extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var string
   *
   * @ORM\Column(name="name", type="string", length=64, nullable=true)
   * 
   */
  private $name;
  
  /**
   * @var string
   *
   * @ORM\Column(name="iso_code", type="string", length=2, nullable=true)
   * 
   */
  private $isoCode;
  
  /**
   * @var string
   *
   * @ORM\Column(name="country_code", type="string", length=4, nullable=true)
   * 
   */
  private $countryCode;
  
  /**
   * @var \Civi\Core\AddressFormat
   *
   * @ORM\ManyToOne(targetEntity="Civi\Core\AddressFormat")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="address_format_id", referencedColumnName="id")})
   */
  private $addressFormat;
  
  /**
   * @var string
   *
   * @ORM\Column(name="idd_prefix", type="string", length=4, nullable=true)
   * 
   */
  private $iddPrefix;
  
  /**
   * @var string
   *
   * @ORM\Column(name="ndd_prefix", type="string", length=4, nullable=true)
   * 
   */
  private $nddPrefix;
  
  /**
   * @var \Civi\Core\Worldregion
   *
   * @ORM\ManyToOne(targetEntity="Civi\Core\Worldregion")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="region_id", referencedColumnName="id")})
   */
  private $region;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_province_abbreviated", type="boolean", nullable=false)
   * 
   */
  private $isProvinceAbbreviated = '0';

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set name
   *
   * @param string $name
   * @return Country
   */
  public function setName($name) {
    $this->name = $name;
    return $this;
  }

  /**
   * Get name
   *
   * @return string
   */
  public function getName() {
    return $this->name;
  }
  
  /**
   * Set isoCode
   *
   * @param string $isoCode
   * @return Country
   */
  public function setIsoCode($isoCode) {
    $this->isoCode = $isoCode;
    return $this;
  }

  /**
   * Get isoCode
   *
   * @return string
   */
  public function getIsoCode() {
    return $this->isoCode;
  }
  
  /**
   * Set countryCode
   *
   * @param string $countryCode
   * @return Country
   */
  public function setCountryCode($countryCode) {
    $this->countryCode = $countryCode;
    return $this;
  }

  /**
   * Get countryCode
   *
   * @return string
   */
  public function getCountryCode() {
    return $this->countryCode;
  }
  
  /**
   * Set addressFormat
   *
   * @param \Civi\Core\AddressFormat $addressFormat
   * @return Country
   */
  public function setAddressFormat(\Civi\Core\AddressFormat $addressFormat = null) {
    $this->addressFormat = $addressFormat;
    return $this;
  }

  /**
   * Get addressFormat
   *
   * @return \Civi\Core\AddressFormat
   */
  public function getAddressFormat() {
    return $this->addressFormat;
  }
  
  /**
   * Set iddPrefix
   *
   * @param string $iddPrefix
   * @return Country
   */
  public function setIddPrefix($iddPrefix) {
    $this->iddPrefix = $iddPrefix;
    return $this;
  }

  /**
   * Get iddPrefix
   *
   * @return string
   */
  public function getIddPrefix() {
    return $this->iddPrefix;
  }
  
  /**
   * Set nddPrefix
   *
   * @param string $nddPrefix
   * @return Country
   */
  public function setNddPrefix($nddPrefix) {
    $this->nddPrefix = $nddPrefix;
    return $this;
  }

  /**
   * Get nddPrefix
   *
   * @return string
   */
  public function getNddPrefix() {
    return $this->nddPrefix;
  }
  
  /**
   * Set region
   *
   * @param \Civi\Core\Worldregion $region
   * @return Country
   */
  public function setRegion(\Civi\Core\Worldregion $region = null) {
    $this->region = $region;
    return $this;
  }

  /**
   * Get region
   *
   * @return \Civi\Core\Worldregion
   */
  public function getRegion() {
    return $this->region;
  }
  
  /**
   * Set isProvinceAbbreviated
   *
   * @param boolean $isProvinceAbbreviated
   * @return Country
   */
  public function setIsProvinceAbbreviated($isProvinceAbbreviated) {
    $this->isProvinceAbbreviated = $isProvinceAbbreviated;
    return $this;
  }

  /**
   * Get isProvinceAbbreviated
   *
   * @return boolean
   */
  public function getIsProvinceAbbreviated() {
    return $this->isProvinceAbbreviated;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
      
              'id' => array(
      
        'name' => 'id',
        'type' => CRM_Utils_Type::T_INT,
                        'required' => true,
                                             
                                    
                          ),
      
              'name' => array(
      
        'name' => 'name',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Country'),
                                 'maxlength' => 64,
                         'size' => CRM_Utils_Type::BIG,
                           
                'import' => true,
        'where' => 'civicrm_country.name',
        'headerPattern' => '/country/i',
        'dataPattern' => '/^[A-Z][a-z]+\.?(\s+[A-Z][a-z]+){0,3}$/',
                         'export' => true,
                                   
                          ),
      
              'iso_code' => array(
      
        'name' => 'iso_code',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Iso Code'),
                                 'maxlength' => 2,
                         'size' => CRM_Utils_Type::TWO,
                           
                                    
                          ),
      
              'country_code' => array(
      
        'name' => 'country_code',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Country Code'),
                                 'maxlength' => 4,
                         'size' => CRM_Utils_Type::FOUR,
                           
                                    
                          ),
      
              'address_format_id' => array(
      
        'name' => 'address_format_id',
        'type' => CRM_Utils_Type::T_INT,
                                                     
                                    
                'FKClassName' => 'CRM_Core_AddressFormat',
                          ),
      
              'idd_prefix' => array(
      
        'name' => 'idd_prefix',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Idd Prefix'),
                                 'maxlength' => 4,
                         'size' => CRM_Utils_Type::FOUR,
                           
                                    
                          ),
      
              'ndd_prefix' => array(
      
        'name' => 'ndd_prefix',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Ndd Prefix'),
                                 'maxlength' => 4,
                         'size' => CRM_Utils_Type::FOUR,
                           
                                    
                          ),
      
              'region_id' => array(
      
        'name' => 'region_id',
        'type' => CRM_Utils_Type::T_INT,
                        'required' => true,
                                             
                                    
                'FKClassName' => 'CRM_Core_Worldregion',
                          ),
      
              'is_province_abbreviated' => array(
      
        'name' => 'is_province_abbreviated',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                                                     
                                    
                          ),
             );
    }
    return self::$_fields;
  }

}

