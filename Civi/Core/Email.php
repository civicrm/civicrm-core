<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Core/Email.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Core;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;

/**
 * Email
 *
 * @ORM\Table(name="civicrm_email", indexes={@ORM\Index(name="index_location_type", columns={"location_type_id"}),@ORM\Index(name="UI_email", columns={"email"}),@ORM\Index(name="index_is_primary", columns={"is_primary"}),@ORM\Index(name="index_is_billing", columns={"is_billing"}),@ORM\Index(name="FK_civicrm_email_contact_id", columns={"contact_id"})})
 * @ORM\Entity
 */
class Email extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var \Civi\Contact\Contact
   *
   * @ORM\ManyToOne(targetEntity="Civi\Contact\Contact")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="contact_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $contact;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="location_type_id", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $locationTypeId;
  
  /**
   * @var string
   *
   * @ORM\Column(name="email", type="string", length=254, nullable=true)
   * 
   */
  private $email;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_primary", type="boolean", nullable=false)
   * 
   */
  private $isPrimary = '0';
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_billing", type="boolean", nullable=false)
   * 
   */
  private $isBilling = '0';
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="on_hold", type="boolean", nullable=false)
   * 
   */
  private $onHold = '0';
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_bulkmail", type="boolean", nullable=false)
   * 
   */
  private $isBulkmail = '0';
  
  /**
   * @var datetime
   *
   * @ORM\Column(name="hold_date", type="datetime", nullable=true)
   * 
   */
  private $holdDate;
  
  /**
   * @var datetime
   *
   * @ORM\Column(name="reset_date", type="datetime", nullable=true)
   * 
   */
  private $resetDate;
  
  /**
   * @var text
   *
   * @ORM\Column(name="signature_text", type="text", nullable=false)
   * 
   */
  private $signatureText = 'NULL';
  
  /**
   * @var text
   *
   * @ORM\Column(name="signature_html", type="text", nullable=false)
   * 
   */
  private $signatureHtml = 'NULL';

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set contact
   *
   * @param \Civi\Contact\Contact $contact
   * @return Email
   */
  public function setContact(\Civi\Contact\Contact $contact = null) {
    $this->contact = $contact;
    return $this;
  }

  /**
   * Get contact
   *
   * @return \Civi\Contact\Contact
   */
  public function getContact() {
    return $this->contact;
  }
  
  /**
   * Set locationTypeId
   *
   * @param integer $locationTypeId
   * @return Email
   */
  public function setLocationTypeId($locationTypeId) {
    $this->locationTypeId = $locationTypeId;
    return $this;
  }

  /**
   * Get locationTypeId
   *
   * @return integer
   */
  public function getLocationTypeId() {
    return $this->locationTypeId;
  }
  
  /**
   * Set email
   *
   * @param string $email
   * @return Email
   */
  public function setEmail($email) {
    $this->email = $email;
    return $this;
  }

  /**
   * Get email
   *
   * @return string
   */
  public function getEmail() {
    return $this->email;
  }
  
  /**
   * Set isPrimary
   *
   * @param boolean $isPrimary
   * @return Email
   */
  public function setIsPrimary($isPrimary) {
    $this->isPrimary = $isPrimary;
    return $this;
  }

  /**
   * Get isPrimary
   *
   * @return boolean
   */
  public function getIsPrimary() {
    return $this->isPrimary;
  }
  
  /**
   * Set isBilling
   *
   * @param boolean $isBilling
   * @return Email
   */
  public function setIsBilling($isBilling) {
    $this->isBilling = $isBilling;
    return $this;
  }

  /**
   * Get isBilling
   *
   * @return boolean
   */
  public function getIsBilling() {
    return $this->isBilling;
  }
  
  /**
   * Set onHold
   *
   * @param boolean $onHold
   * @return Email
   */
  public function setOnHold($onHold) {
    $this->onHold = $onHold;
    return $this;
  }

  /**
   * Get onHold
   *
   * @return boolean
   */
  public function getOnHold() {
    return $this->onHold;
  }
  
  /**
   * Set isBulkmail
   *
   * @param boolean $isBulkmail
   * @return Email
   */
  public function setIsBulkmail($isBulkmail) {
    $this->isBulkmail = $isBulkmail;
    return $this;
  }

  /**
   * Get isBulkmail
   *
   * @return boolean
   */
  public function getIsBulkmail() {
    return $this->isBulkmail;
  }
  
  /**
   * Set holdDate
   *
   * @param datetime $holdDate
   * @return Email
   */
  public function setHoldDate($holdDate) {
    $this->holdDate = $holdDate;
    return $this;
  }

  /**
   * Get holdDate
   *
   * @return datetime
   */
  public function getHoldDate() {
    return $this->holdDate;
  }
  
  /**
   * Set resetDate
   *
   * @param datetime $resetDate
   * @return Email
   */
  public function setResetDate($resetDate) {
    $this->resetDate = $resetDate;
    return $this;
  }

  /**
   * Get resetDate
   *
   * @return datetime
   */
  public function getResetDate() {
    return $this->resetDate;
  }
  
  /**
   * Set signatureText
   *
   * @param text $signatureText
   * @return Email
   */
  public function setSignatureText($signatureText) {
    $this->signatureText = $signatureText;
    return $this;
  }

  /**
   * Get signatureText
   *
   * @return text
   */
  public function getSignatureText() {
    return $this->signatureText;
  }
  
  /**
   * Set signatureHtml
   *
   * @param text $signatureHtml
   * @return Email
   */
  public function setSignatureHtml($signatureHtml) {
    $this->signatureHtml = $signatureHtml;
    return $this;
  }

  /**
   * Get signatureHtml
   *
   * @return text
   */
  public function getSignatureHtml() {
    return $this->signatureHtml;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
      
              'id' => array(
      
        'name' => 'id',
        'type' => CRM_Utils_Type::T_INT,
                        'required' => true,
                                             
                                    
                          ),
      
              'contact_id' => array(
      
        'name' => 'contact_id',
        'type' => CRM_Utils_Type::T_INT,
                                                     
                                    
                'FKClassName' => 'CRM_Contact_Contact',
                          ),
      
              'location_type_id' => array(
      
        'name' => 'location_type_id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Email Location Type'),
                                                     
                                    
                                     'pseudoconstant' => array(
                                'table' => 'civicrm_location_type',
                      'keyColumn' => 'id',
                      'labelColumn' => 'display_name',
                    )
                 ),
      
              'email' => array(
      
        'name' => 'email',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Email'),
                                 'maxlength' => 254,
                         'size' => CRM_Utils_Type::MEDIUM,
                           
                'import' => true,
        'where' => 'civicrm_email.email',
        'headerPattern' => '/e.?mail/i',
        'dataPattern' => '/^[a-zA-Z][\w\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\w\.-]*[a-zA-Z0-9]\.[a-zA-Z][a-zA-Z\.]*[a-zA-Z]$/',
                         'export' => true,
                                 'rule' => 'email',
                  
                          ),
      
              'is_primary' => array(
      
        'name' => 'is_primary',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                                                     
                                    
                          ),
      
              'is_billing' => array(
      
        'name' => 'is_billing',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                                                     
                                    
                          ),
      
              'on_hold' => array(
      
        'name' => 'on_hold',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('On Hold'),
                        'required' => true,
                                             
                         'export' => true,
                'where' => 'civicrm_email.on_hold',
        'headerPattern' => '',
        'dataPattern' => '',
                                   
                          ),
      
              'is_bulkmail' => array(
      
        'name' => 'is_bulkmail',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Use for Bulk Mail'),
                        'required' => true,
                                             
                         'export' => true,
                'where' => 'civicrm_email.is_bulkmail',
        'headerPattern' => '',
        'dataPattern' => '',
                                   
                          ),
      
              'hold_date' => array(
      
        'name' => 'hold_date',
        'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
                'title' => ts('Hold Date'),
                                                     
                                    
                          ),
      
              'reset_date' => array(
      
        'name' => 'reset_date',
        'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
                'title' => ts('Reset Date'),
                                                     
                                    
                          ),
      
              'signature_text' => array(
      
        'name' => 'signature_text',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Signature Text'),
                                                     
                'import' => true,
        'where' => 'civicrm_email.signature_text',
        'headerPattern' => '',
        'dataPattern' => '',
                         'export' => true,
                                          'default' => 'NULL',
         
                          ),
      
              'signature_html' => array(
      
        'name' => 'signature_html',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Signature Html'),
                                                     
                'import' => true,
        'where' => 'civicrm_email.signature_html',
        'headerPattern' => '',
        'dataPattern' => '',
                         'export' => true,
                                          'default' => 'NULL',
         
                          ),
             );
    }
    return self::$_fields;
  }

}

