<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Core/PrevNextCache.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Core;

use Doctrine\ORM\Mapping as ORM;

/**
 * PrevNextCache
 *
 * @ORM\Table(name="civicrm_prevnext_cache", indexes={@ORM\Index(name="index_all", columns={"cacheKey,entity_id1,entity_id2,entity_table,is_selected"})})
 * @ORM\Entity
 */
class PrevNextCache extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false)
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var string
   *
   * @ORM\Column(name="entity_table", type="string", length=64, nullable=true)
   * 
   */
  private $entityTable;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="entity_id1", type="integer", nullable=true)
   * 
   */
  private $entityId1;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="entity_id2", type="integer", nullable=true)
   * 
   */
  private $entityId2;
  
  /**
   * @var string
   *
   * @ORM\Column(name="cacheKey", type="string", length=255, nullable=true)
   * 
   */
  private $cacheKey;
  
  /**
   * @var longtext
   *
   * @ORM\Column(name="data", type="longtext", nullable=true)
   * 
   */
  private $data;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_selected", type="boolean", nullable=false)
   * 
   */
  private $isSelected = '0';

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set entityTable
   *
   * @param string $entityTable
   * @return PrevNextCache
   */
  public function setEntityTable($entityTable) {
    $this->entityTable = $entityTable;
    return $this;
  }

  /**
   * Get entityTable
   *
   * @return string
   */
  public function getEntityTable() {
    return $this->entityTable;
  }
  
  /**
   * Set entityId1
   *
   * @param integer $entityId1
   * @return PrevNextCache
   */
  public function setEntityId1($entityId1) {
    $this->entityId1 = $entityId1;
    return $this;
  }

  /**
   * Get entityId1
   *
   * @return integer
   */
  public function getEntityId1() {
    return $this->entityId1;
  }
  
  /**
   * Set entityId2
   *
   * @param integer $entityId2
   * @return PrevNextCache
   */
  public function setEntityId2($entityId2) {
    $this->entityId2 = $entityId2;
    return $this;
  }

  /**
   * Get entityId2
   *
   * @return integer
   */
  public function getEntityId2() {
    return $this->entityId2;
  }
  
  /**
   * Set cacheKey
   *
   * @param string $cacheKey
   * @return PrevNextCache
   */
  public function setCacheKey($cacheKey) {
    $this->cacheKey = $cacheKey;
    return $this;
  }

  /**
   * Get cacheKey
   *
   * @return string
   */
  public function getCacheKey() {
    return $this->cacheKey;
  }
  
  /**
   * Set data
   *
   * @param longtext $data
   * @return PrevNextCache
   */
  public function setData($data) {
    $this->data = $data;
    return $this;
  }

  /**
   * Get data
   *
   * @return longtext
   */
  public function getData() {
    return $this->data;
  }
  
  /**
   * Set isSelected
   *
   * @param boolean $isSelected
   * @return PrevNextCache
   */
  public function setIsSelected($isSelected) {
    $this->isSelected = $isSelected;
    return $this;
  }

  /**
   * Get isSelected
   *
   * @return boolean
   */
  public function getIsSelected() {
    return $this->isSelected;
  }

}

