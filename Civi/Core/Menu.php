<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Core/Menu.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Core;

use Doctrine\ORM\Mapping as ORM;

/**
 * Menu
 *
 * @ORM\Table(name="civicrm_menu", uniqueConstraints={@ORM\UniqueConstraint(name="UI_path_domain_id", columns={"path,domain_id"})}, indexes={@ORM\Index(name="FK_civicrm_menu_domain_id", columns={"domain_id"}),@ORM\Index(name="FK_civicrm_menu_component_id", columns={"component_id"})})
 * @ORM\Entity
 */
class Menu extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false)
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var \Civi\Core\Domain
   *
   * @ORM\ManyToOne(targetEntity="Civi\Core\Domain")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="domain_id", referencedColumnName="id")})
   */
  private $domain;
  
  /**
   * @var string
   *
   * @ORM\Column(name="path", type="string", length=255, nullable=true)
   * 
   */
  private $path;
  
  /**
   * @var text
   *
   * @ORM\Column(name="path_arguments", type="text", nullable=true)
   * 
   */
  private $pathArguments;
  
  /**
   * @var string
   *
   * @ORM\Column(name="title", type="string", length=255, nullable=true)
   * 
   */
  private $title;
  
  /**
   * @var string
   *
   * @ORM\Column(name="access_callback", type="string", length=255, nullable=true)
   * 
   */
  private $accessCallback;
  
  /**
   * @var text
   *
   * @ORM\Column(name="access_arguments", type="text", nullable=true)
   * 
   */
  private $accessArguments;
  
  /**
   * @var string
   *
   * @ORM\Column(name="page_callback", type="string", length=255, nullable=true)
   * 
   */
  private $pageCallback;
  
  /**
   * @var text
   *
   * @ORM\Column(name="page_arguments", type="text", nullable=true)
   * 
   */
  private $pageArguments;
  
  /**
   * @var text
   *
   * @ORM\Column(name="breadcrumb", type="text", nullable=true)
   * 
   */
  private $breadcrumb;
  
  /**
   * @var string
   *
   * @ORM\Column(name="return_url", type="string", length=255, nullable=true)
   * 
   */
  private $returnUrl;
  
  /**
   * @var string
   *
   * @ORM\Column(name="return_url_args", type="string", length=255, nullable=true)
   * 
   */
  private $returnUrlArgs;
  
  /**
   * @var \Civi\Core\Component
   *
   * @ORM\ManyToOne(targetEntity="Civi\Core\Component")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="component_id", referencedColumnName="id")})
   */
  private $component;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_active", type="boolean", nullable=true)
   * 
   */
  private $isActive;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_public", type="boolean", nullable=true)
   * 
   */
  private $isPublic;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_exposed", type="boolean", nullable=true)
   * 
   */
  private $isExposed;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_ssl", type="boolean", nullable=true)
   * 
   */
  private $isSsl;
  
  /**
   * @var int
   *
   * @ORM\Column(name="weight", type="int", nullable=false)
   * 
   */
  private $weight = '1';
  
  /**
   * @var int
   *
   * @ORM\Column(name="type", type="int", nullable=false)
   * 
   */
  private $type = '1';
  
  /**
   * @var int
   *
   * @ORM\Column(name="page_type", type="int", nullable=false)
   * 
   */
  private $pageType = '1';
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="skipBreadcrumb", type="boolean", nullable=true)
   * 
   */
  private $skipBreadcrumb;

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set domain
   *
   * @param \Civi\Core\Domain $domain
   * @return Menu
   */
  public function setDomain(\Civi\Core\Domain $domain = null) {
    $this->domain = $domain;
    return $this;
  }

  /**
   * Get domain
   *
   * @return \Civi\Core\Domain
   */
  public function getDomain() {
    return $this->domain;
  }
  
  /**
   * Set path
   *
   * @param string $path
   * @return Menu
   */
  public function setPath($path) {
    $this->path = $path;
    return $this;
  }

  /**
   * Get path
   *
   * @return string
   */
  public function getPath() {
    return $this->path;
  }
  
  /**
   * Set pathArguments
   *
   * @param text $pathArguments
   * @return Menu
   */
  public function setPathArguments($pathArguments) {
    $this->pathArguments = $pathArguments;
    return $this;
  }

  /**
   * Get pathArguments
   *
   * @return text
   */
  public function getPathArguments() {
    return $this->pathArguments;
  }
  
  /**
   * Set title
   *
   * @param string $title
   * @return Menu
   */
  public function setTitle($title) {
    $this->title = $title;
    return $this;
  }

  /**
   * Get title
   *
   * @return string
   */
  public function getTitle() {
    return $this->title;
  }
  
  /**
   * Set accessCallback
   *
   * @param string $accessCallback
   * @return Menu
   */
  public function setAccessCallback($accessCallback) {
    $this->accessCallback = $accessCallback;
    return $this;
  }

  /**
   * Get accessCallback
   *
   * @return string
   */
  public function getAccessCallback() {
    return $this->accessCallback;
  }
  
  /**
   * Set accessArguments
   *
   * @param text $accessArguments
   * @return Menu
   */
  public function setAccessArguments($accessArguments) {
    $this->accessArguments = $accessArguments;
    return $this;
  }

  /**
   * Get accessArguments
   *
   * @return text
   */
  public function getAccessArguments() {
    return $this->accessArguments;
  }
  
  /**
   * Set pageCallback
   *
   * @param string $pageCallback
   * @return Menu
   */
  public function setPageCallback($pageCallback) {
    $this->pageCallback = $pageCallback;
    return $this;
  }

  /**
   * Get pageCallback
   *
   * @return string
   */
  public function getPageCallback() {
    return $this->pageCallback;
  }
  
  /**
   * Set pageArguments
   *
   * @param text $pageArguments
   * @return Menu
   */
  public function setPageArguments($pageArguments) {
    $this->pageArguments = $pageArguments;
    return $this;
  }

  /**
   * Get pageArguments
   *
   * @return text
   */
  public function getPageArguments() {
    return $this->pageArguments;
  }
  
  /**
   * Set breadcrumb
   *
   * @param text $breadcrumb
   * @return Menu
   */
  public function setBreadcrumb($breadcrumb) {
    $this->breadcrumb = $breadcrumb;
    return $this;
  }

  /**
   * Get breadcrumb
   *
   * @return text
   */
  public function getBreadcrumb() {
    return $this->breadcrumb;
  }
  
  /**
   * Set returnUrl
   *
   * @param string $returnUrl
   * @return Menu
   */
  public function setReturnUrl($returnUrl) {
    $this->returnUrl = $returnUrl;
    return $this;
  }

  /**
   * Get returnUrl
   *
   * @return string
   */
  public function getReturnUrl() {
    return $this->returnUrl;
  }
  
  /**
   * Set returnUrlArgs
   *
   * @param string $returnUrlArgs
   * @return Menu
   */
  public function setReturnUrlArgs($returnUrlArgs) {
    $this->returnUrlArgs = $returnUrlArgs;
    return $this;
  }

  /**
   * Get returnUrlArgs
   *
   * @return string
   */
  public function getReturnUrlArgs() {
    return $this->returnUrlArgs;
  }
  
  /**
   * Set component
   *
   * @param \Civi\Core\Component $component
   * @return Menu
   */
  public function setComponent(\Civi\Core\Component $component = null) {
    $this->component = $component;
    return $this;
  }

  /**
   * Get component
   *
   * @return \Civi\Core\Component
   */
  public function getComponent() {
    return $this->component;
  }
  
  /**
   * Set isActive
   *
   * @param boolean $isActive
   * @return Menu
   */
  public function setIsActive($isActive) {
    $this->isActive = $isActive;
    return $this;
  }

  /**
   * Get isActive
   *
   * @return boolean
   */
  public function getIsActive() {
    return $this->isActive;
  }
  
  /**
   * Set isPublic
   *
   * @param boolean $isPublic
   * @return Menu
   */
  public function setIsPublic($isPublic) {
    $this->isPublic = $isPublic;
    return $this;
  }

  /**
   * Get isPublic
   *
   * @return boolean
   */
  public function getIsPublic() {
    return $this->isPublic;
  }
  
  /**
   * Set isExposed
   *
   * @param boolean $isExposed
   * @return Menu
   */
  public function setIsExposed($isExposed) {
    $this->isExposed = $isExposed;
    return $this;
  }

  /**
   * Get isExposed
   *
   * @return boolean
   */
  public function getIsExposed() {
    return $this->isExposed;
  }
  
  /**
   * Set isSsl
   *
   * @param boolean $isSsl
   * @return Menu
   */
  public function setIsSsl($isSsl) {
    $this->isSsl = $isSsl;
    return $this;
  }

  /**
   * Get isSsl
   *
   * @return boolean
   */
  public function getIsSsl() {
    return $this->isSsl;
  }
  
  /**
   * Set weight
   *
   * @param int $weight
   * @return Menu
   */
  public function setWeight($weight) {
    $this->weight = $weight;
    return $this;
  }

  /**
   * Get weight
   *
   * @return int
   */
  public function getWeight() {
    return $this->weight;
  }
  
  /**
   * Set type
   *
   * @param int $type
   * @return Menu
   */
  public function setType($type) {
    $this->type = $type;
    return $this;
  }

  /**
   * Get type
   *
   * @return int
   */
  public function getType() {
    return $this->type;
  }
  
  /**
   * Set pageType
   *
   * @param int $pageType
   * @return Menu
   */
  public function setPageType($pageType) {
    $this->pageType = $pageType;
    return $this;
  }

  /**
   * Get pageType
   *
   * @return int
   */
  public function getPageType() {
    return $this->pageType;
  }
  
  /**
   * Set skipBreadcrumb
   *
   * @param boolean $skipBreadcrumb
   * @return Menu
   */
  public function setSkipBreadcrumb($skipBreadcrumb) {
    $this->skipBreadcrumb = $skipBreadcrumb;
    return $this;
  }

  /**
   * Get skipBreadcrumb
   *
   * @return boolean
   */
  public function getSkipBreadcrumb() {
    return $this->skipBreadcrumb;
  }

}

