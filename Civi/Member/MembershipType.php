<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Member/MembershipType.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Member;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;

/**
 * MembershipType
 *
 * @ORM\Table(name="civicrm_membership_type", indexes={@ORM\Index(name="index_relationship_type_id", columns={"relationship_type_id"}),@ORM\Index(name="FK_civicrm_membership_type_domain_id", columns={"domain_id"}),@ORM\Index(name="FK_civicrm_membership_type_member_of_contact_id", columns={"member_of_contact_id"}),@ORM\Index(name="FK_civicrm_membership_type_financial_type_id", columns={"financial_type_id"})})
 * @ORM\Entity
 */
class MembershipType extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var \Civi\Core\Domain
   *
   * @ORM\ManyToOne(targetEntity="Civi\Core\Domain")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="domain_id", referencedColumnName="id")})
   */
  private $domain;
  
  /**
   * @var string
   *
   * @ORM\Column(name="name", type="string", length=128, nullable=true)
   * 
   */
  private $name;
  
  /**
   * @var string
   *
   * @ORM\Column(name="description", type="string", length=255, nullable=true)
   * 
   */
  private $description;
  
  /**
   * @var \Civi\Contact\Contact
   *
   * @ORM\ManyToOne(targetEntity="Civi\Contact\Contact")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="member_of_contact_id", referencedColumnName="id", onDelete="RESTRICT")})
   */
  private $memberOfContact;
  
  /**
   * @var \Civi\Financial\FinancialType
   *
   * @ORM\ManyToOne(targetEntity="Civi\Financial\FinancialType")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="financial_type_id", referencedColumnName="id")})
   */
  private $financialType;
  
  /**
   * @var float
   *
   * @ORM\Column(name="minimum_fee", type="float", nullable=false)
   * 
   */
  private $minimumFee = '0';
  
  /**
   * @var string
   *
   * @ORM\Column(name="duration_unit", type="string", length=8, nullable=true)
   * 
   */
  private $durationUnit;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="duration_interval", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $durationInterval;
  
  /**
   * @var string
   *
   * @ORM\Column(name="period_type", type="string", length=8, nullable=true)
   * 
   */
  private $periodType;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="fixed_period_start_day", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $fixedPeriodStartDay;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="fixed_period_rollover_day", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $fixedPeriodRolloverDay;
  
  /**
   * @var string
   *
   * @ORM\Column(name="relationship_type_id", type="string", length=64, nullable=true)
   * 
   */
  private $relationshipTypeId;
  
  /**
   * @var string
   *
   * @ORM\Column(name="relationship_direction", type="string", length=128, nullable=true)
   * 
   */
  private $relationshipDirection;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="max_related", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $maxRelated;
  
  /**
   * @var string
   *
   * @ORM\Column(name="visibility", type="string", length=64, nullable=true)
   * 
   */
  private $visibility;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="weight", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $weight;
  
  /**
   * @var string
   *
   * @ORM\Column(name="receipt_text_signup", type="string", length=255, nullable=true)
   * 
   */
  private $receiptTextSignup;
  
  /**
   * @var string
   *
   * @ORM\Column(name="receipt_text_renewal", type="string", length=255, nullable=true)
   * 
   */
  private $receiptTextRenewal;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="auto_renew", type="boolean", nullable=false)
   * 
   */
  private $autoRenew = '0';
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_active", type="boolean", nullable=false)
   * 
   */
  private $isActive = '1';

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set domain
   *
   * @param \Civi\Core\Domain $domain
   * @return MembershipType
   */
  public function setDomain(\Civi\Core\Domain $domain = null) {
    $this->domain = $domain;
    return $this;
  }

  /**
   * Get domain
   *
   * @return \Civi\Core\Domain
   */
  public function getDomain() {
    return $this->domain;
  }
  
  /**
   * Set name
   *
   * @param string $name
   * @return MembershipType
   */
  public function setName($name) {
    $this->name = $name;
    return $this;
  }

  /**
   * Get name
   *
   * @return string
   */
  public function getName() {
    return $this->name;
  }
  
  /**
   * Set description
   *
   * @param string $description
   * @return MembershipType
   */
  public function setDescription($description) {
    $this->description = $description;
    return $this;
  }

  /**
   * Get description
   *
   * @return string
   */
  public function getDescription() {
    return $this->description;
  }
  
  /**
   * Set memberOfContact
   *
   * @param \Civi\Contact\Contact $memberOfContact
   * @return MembershipType
   */
  public function setMemberOfContact(\Civi\Contact\Contact $memberOfContact = null) {
    $this->memberOfContact = $memberOfContact;
    return $this;
  }

  /**
   * Get memberOfContact
   *
   * @return \Civi\Contact\Contact
   */
  public function getMemberOfContact() {
    return $this->memberOfContact;
  }
  
  /**
   * Set financialType
   *
   * @param \Civi\Financial\FinancialType $financialType
   * @return MembershipType
   */
  public function setFinancialType(\Civi\Financial\FinancialType $financialType = null) {
    $this->financialType = $financialType;
    return $this;
  }

  /**
   * Get financialType
   *
   * @return \Civi\Financial\FinancialType
   */
  public function getFinancialType() {
    return $this->financialType;
  }
  
  /**
   * Set minimumFee
   *
   * @param float $minimumFee
   * @return MembershipType
   */
  public function setMinimumFee($minimumFee) {
    $this->minimumFee = $minimumFee;
    return $this;
  }

  /**
   * Get minimumFee
   *
   * @return float
   */
  public function getMinimumFee() {
    return $this->minimumFee;
  }
  
  /**
   * Set durationUnit
   *
   * @param string $durationUnit
   * @return MembershipType
   */
  public function setDurationUnit($durationUnit) {
    $this->durationUnit = $durationUnit;
    return $this;
  }

  /**
   * Get durationUnit
   *
   * @return string
   */
  public function getDurationUnit() {
    return $this->durationUnit;
  }
  
  /**
   * Set durationInterval
   *
   * @param integer $durationInterval
   * @return MembershipType
   */
  public function setDurationInterval($durationInterval) {
    $this->durationInterval = $durationInterval;
    return $this;
  }

  /**
   * Get durationInterval
   *
   * @return integer
   */
  public function getDurationInterval() {
    return $this->durationInterval;
  }
  
  /**
   * Set periodType
   *
   * @param string $periodType
   * @return MembershipType
   */
  public function setPeriodType($periodType) {
    $this->periodType = $periodType;
    return $this;
  }

  /**
   * Get periodType
   *
   * @return string
   */
  public function getPeriodType() {
    return $this->periodType;
  }
  
  /**
   * Set fixedPeriodStartDay
   *
   * @param integer $fixedPeriodStartDay
   * @return MembershipType
   */
  public function setFixedPeriodStartDay($fixedPeriodStartDay) {
    $this->fixedPeriodStartDay = $fixedPeriodStartDay;
    return $this;
  }

  /**
   * Get fixedPeriodStartDay
   *
   * @return integer
   */
  public function getFixedPeriodStartDay() {
    return $this->fixedPeriodStartDay;
  }
  
  /**
   * Set fixedPeriodRolloverDay
   *
   * @param integer $fixedPeriodRolloverDay
   * @return MembershipType
   */
  public function setFixedPeriodRolloverDay($fixedPeriodRolloverDay) {
    $this->fixedPeriodRolloverDay = $fixedPeriodRolloverDay;
    return $this;
  }

  /**
   * Get fixedPeriodRolloverDay
   *
   * @return integer
   */
  public function getFixedPeriodRolloverDay() {
    return $this->fixedPeriodRolloverDay;
  }
  
  /**
   * Set relationshipTypeId
   *
   * @param string $relationshipTypeId
   * @return MembershipType
   */
  public function setRelationshipTypeId($relationshipTypeId) {
    $this->relationshipTypeId = $relationshipTypeId;
    return $this;
  }

  /**
   * Get relationshipTypeId
   *
   * @return string
   */
  public function getRelationshipTypeId() {
    return $this->relationshipTypeId;
  }
  
  /**
   * Set relationshipDirection
   *
   * @param string $relationshipDirection
   * @return MembershipType
   */
  public function setRelationshipDirection($relationshipDirection) {
    $this->relationshipDirection = $relationshipDirection;
    return $this;
  }

  /**
   * Get relationshipDirection
   *
   * @return string
   */
  public function getRelationshipDirection() {
    return $this->relationshipDirection;
  }
  
  /**
   * Set maxRelated
   *
   * @param integer $maxRelated
   * @return MembershipType
   */
  public function setMaxRelated($maxRelated) {
    $this->maxRelated = $maxRelated;
    return $this;
  }

  /**
   * Get maxRelated
   *
   * @return integer
   */
  public function getMaxRelated() {
    return $this->maxRelated;
  }
  
  /**
   * Set visibility
   *
   * @param string $visibility
   * @return MembershipType
   */
  public function setVisibility($visibility) {
    $this->visibility = $visibility;
    return $this;
  }

  /**
   * Get visibility
   *
   * @return string
   */
  public function getVisibility() {
    return $this->visibility;
  }
  
  /**
   * Set weight
   *
   * @param integer $weight
   * @return MembershipType
   */
  public function setWeight($weight) {
    $this->weight = $weight;
    return $this;
  }

  /**
   * Get weight
   *
   * @return integer
   */
  public function getWeight() {
    return $this->weight;
  }
  
  /**
   * Set receiptTextSignup
   *
   * @param string $receiptTextSignup
   * @return MembershipType
   */
  public function setReceiptTextSignup($receiptTextSignup) {
    $this->receiptTextSignup = $receiptTextSignup;
    return $this;
  }

  /**
   * Get receiptTextSignup
   *
   * @return string
   */
  public function getReceiptTextSignup() {
    return $this->receiptTextSignup;
  }
  
  /**
   * Set receiptTextRenewal
   *
   * @param string $receiptTextRenewal
   * @return MembershipType
   */
  public function setReceiptTextRenewal($receiptTextRenewal) {
    $this->receiptTextRenewal = $receiptTextRenewal;
    return $this;
  }

  /**
   * Get receiptTextRenewal
   *
   * @return string
   */
  public function getReceiptTextRenewal() {
    return $this->receiptTextRenewal;
  }
  
  /**
   * Set autoRenew
   *
   * @param boolean $autoRenew
   * @return MembershipType
   */
  public function setAutoRenew($autoRenew) {
    $this->autoRenew = $autoRenew;
    return $this;
  }

  /**
   * Get autoRenew
   *
   * @return boolean
   */
  public function getAutoRenew() {
    return $this->autoRenew;
  }
  
  /**
   * Set isActive
   *
   * @param boolean $isActive
   * @return MembershipType
   */
  public function setIsActive($isActive) {
    $this->isActive = $isActive;
    return $this;
  }

  /**
   * Get isActive
   *
   * @return boolean
   */
  public function getIsActive() {
    return $this->isActive;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
      
              'id' => array(
      
        'name' => 'id',
        'type' => CRM_Utils_Type::T_INT,
                        'required' => true,
                                             
                                    
                          ),
      
              'domain_id' => array(
      
        'name' => 'domain_id',
        'type' => CRM_Utils_Type::T_INT,
                        'required' => true,
                                             
                                    
                'FKClassName' => 'CRM_Core_Domain',
                          ),
      
              'membership_type' => array(
      
        'name' => 'name',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Membership Type'),
                                 'maxlength' => 128,
                         'size' => CRM_Utils_Type::HUGE,
                           
                'import' => true,
        'where' => 'civicrm_membership_type.name',
        'headerPattern' => '',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'description' => array(
      
        'name' => 'description',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Description'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'member_of_contact_id' => array(
      
        'name' => 'member_of_contact_id',
        'type' => CRM_Utils_Type::T_INT,
                        'required' => true,
                                             
                                    
                'FKClassName' => 'CRM_Contact_Contact',
                          ),
      
              'financial_type_id' => array(
      
        'name' => 'financial_type_id',
        'type' => CRM_Utils_Type::T_INT,
                        'required' => true,
                                             
                                    
                'FKClassName' => 'CRM_Financial_FinancialType',
                          ),
      
              'minimum_fee' => array(
      
        'name' => 'minimum_fee',
        'type' => CRM_Utils_Type::T_MONEY,
                'title' => ts('Minimum Fee'),
                                                     
                                    
                          ),
      
              'duration_unit' => array(
      
        'name' => 'duration_unit',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Duration Unit'),
                                 'maxlength' => 8,
                         'size' => CRM_Utils_Type::EIGHT,
                           
                                    
                                     'pseudoconstant' => array(
                                '0' => 'not in database',
                    )
                 ),
      
              'duration_interval' => array(
      
        'name' => 'duration_interval',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Duration Interval'),
                                                     
                                    
                          ),
      
              'period_type' => array(
      
        'name' => 'period_type',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Period Type'),
                                 'maxlength' => 8,
                         'size' => CRM_Utils_Type::EIGHT,
                           
                                    
                                     'pseudoconstant' => array(
                                '0' => 'not in database',
                    )
                 ),
      
              'fixed_period_start_day' => array(
      
        'name' => 'fixed_period_start_day',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Fixed Period Start Day'),
                                                     
                                    
                          ),
      
              'fixed_period_rollover_day' => array(
      
        'name' => 'fixed_period_rollover_day',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Fixed Period Rollover Day'),
                                                     
                                    
                          ),
      
              'relationship_type_id' => array(
      
        'name' => 'relationship_type_id',
        'type' => CRM_Utils_Type::T_STRING,
                                 'maxlength' => 64,
                         'size' => CRM_Utils_Type::BIG,
                           
                                    
                          ),
      
              'relationship_direction' => array(
      
        'name' => 'relationship_direction',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Relationship Direction'),
                                 'maxlength' => 128,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'max_related' => array(
      
        'name' => 'max_related',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Max Related'),
                                                     
                                    
                          ),
      
              'visibility' => array(
      
        'name' => 'visibility',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Visible'),
                                 'maxlength' => 64,
                         'size' => CRM_Utils_Type::BIG,
                           
                                    
                                     'pseudoconstant' => array(
                                'optionGroupName' => 'visibility',
                    )
                 ),
      
              'weight' => array(
      
        'name' => 'weight',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Weight'),
                                                     
                                    
                          ),
      
              'receipt_text_signup' => array(
      
        'name' => 'receipt_text_signup',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Receipt Text Signup'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'receipt_text_renewal' => array(
      
        'name' => 'receipt_text_renewal',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Receipt Text Renewal'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'auto_renew' => array(
      
        'name' => 'auto_renew',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Auto Renew'),
                                                     
                                    
                          ),
      
              'is_active' => array(
      
        'name' => 'is_active',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Is Active'),
                                                     
                                           'default' => '1',
         
                          ),
             );
    }
    return self::$_fields;
  }

}

