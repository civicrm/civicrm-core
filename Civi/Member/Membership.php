<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Member/Membership.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Member;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;

/**
 * Membership
 *
 * @ORM\Table(name="civicrm_membership", indexes={@ORM\Index(name="index_owner_membership_id", columns={"owner_membership_id"}),@ORM\Index(name="FK_civicrm_membership_contact_id", columns={"contact_id"}),@ORM\Index(name="FK_civicrm_membership_membership_type_id", columns={"membership_type_id"}),@ORM\Index(name="FK_civicrm_membership_status_id", columns={"status_id"}),@ORM\Index(name="FK_civicrm_membership_owner_membership_id", columns={"owner_membership_id"}),@ORM\Index(name="FK_civicrm_membership_contribution_recur_id", columns={"contribution_recur_id"}),@ORM\Index(name="FK_civicrm_membership_campaign_id", columns={"campaign_id"})})
 * @ORM\Entity
 */
class Membership extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var \Civi\Contact\Contact
   *
   * @ORM\ManyToOne(targetEntity="Civi\Contact\Contact")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="contact_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $contact;
  
  /**
   * @var \Civi\Member\MembershipType
   *
   * @ORM\ManyToOne(targetEntity="Civi\Member\MembershipType")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="membership_type_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $membershipType;
  
  /**
   * @var date
   *
   * @ORM\Column(name="join_date", type="date", nullable=true)
   * 
   */
  private $joinDate;
  
  /**
   * @var date
   *
   * @ORM\Column(name="start_date", type="date", nullable=true)
   * 
   */
  private $startDate;
  
  /**
   * @var date
   *
   * @ORM\Column(name="end_date", type="date", nullable=true)
   * 
   */
  private $endDate;
  
  /**
   * @var string
   *
   * @ORM\Column(name="source", type="string", length=128, nullable=true)
   * 
   */
  private $source;
  
  /**
   * @var \Civi\Member\MembershipStatus
   *
   * @ORM\ManyToOne(targetEntity="Civi\Member\MembershipStatus")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="status_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $status;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_override", type="boolean", nullable=true)
   * 
   */
  private $isOverride;
  
  /**
   * @var \Civi\Member\Membership
   *
   * @ORM\ManyToOne(targetEntity="Civi\Member\Membership")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="owner_membership_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $ownerMembership;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="max_related", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $maxRelated;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_test", type="boolean", nullable=false)
   * 
   */
  private $isTest = '0';
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_pay_later", type="boolean", nullable=false)
   * 
   */
  private $isPayLater = '0';
  
  /**
   * @var \Civi\Contribute\ContributionRecur
   *
   * @ORM\ManyToOne(targetEntity="Civi\Contribute\ContributionRecur")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="contribution_recur_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $contributionRecur;
  
  /**
   * @var \Civi\Campaign\Campaign
   *
   * @ORM\ManyToOne(targetEntity="Civi\Campaign\Campaign")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="campaign_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $campaign;

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set contact
   *
   * @param \Civi\Contact\Contact $contact
   * @return Membership
   */
  public function setContact(\Civi\Contact\Contact $contact = null) {
    $this->contact = $contact;
    return $this;
  }

  /**
   * Get contact
   *
   * @return \Civi\Contact\Contact
   */
  public function getContact() {
    return $this->contact;
  }
  
  /**
   * Set membershipType
   *
   * @param \Civi\Member\MembershipType $membershipType
   * @return Membership
   */
  public function setMembershipType(\Civi\Member\MembershipType $membershipType = null) {
    $this->membershipType = $membershipType;
    return $this;
  }

  /**
   * Get membershipType
   *
   * @return \Civi\Member\MembershipType
   */
  public function getMembershipType() {
    return $this->membershipType;
  }
  
  /**
   * Set joinDate
   *
   * @param date $joinDate
   * @return Membership
   */
  public function setJoinDate($joinDate) {
    $this->joinDate = $joinDate;
    return $this;
  }

  /**
   * Get joinDate
   *
   * @return date
   */
  public function getJoinDate() {
    return $this->joinDate;
  }
  
  /**
   * Set startDate
   *
   * @param date $startDate
   * @return Membership
   */
  public function setStartDate($startDate) {
    $this->startDate = $startDate;
    return $this;
  }

  /**
   * Get startDate
   *
   * @return date
   */
  public function getStartDate() {
    return $this->startDate;
  }
  
  /**
   * Set endDate
   *
   * @param date $endDate
   * @return Membership
   */
  public function setEndDate($endDate) {
    $this->endDate = $endDate;
    return $this;
  }

  /**
   * Get endDate
   *
   * @return date
   */
  public function getEndDate() {
    return $this->endDate;
  }
  
  /**
   * Set source
   *
   * @param string $source
   * @return Membership
   */
  public function setSource($source) {
    $this->source = $source;
    return $this;
  }

  /**
   * Get source
   *
   * @return string
   */
  public function getSource() {
    return $this->source;
  }
  
  /**
   * Set status
   *
   * @param \Civi\Member\MembershipStatus $status
   * @return Membership
   */
  public function setStatus(\Civi\Member\MembershipStatus $status = null) {
    $this->status = $status;
    return $this;
  }

  /**
   * Get status
   *
   * @return \Civi\Member\MembershipStatus
   */
  public function getStatus() {
    return $this->status;
  }
  
  /**
   * Set isOverride
   *
   * @param boolean $isOverride
   * @return Membership
   */
  public function setIsOverride($isOverride) {
    $this->isOverride = $isOverride;
    return $this;
  }

  /**
   * Get isOverride
   *
   * @return boolean
   */
  public function getIsOverride() {
    return $this->isOverride;
  }
  
  /**
   * Set ownerMembership
   *
   * @param \Civi\Member\Membership $ownerMembership
   * @return Membership
   */
  public function setOwnerMembership(\Civi\Member\Membership $ownerMembership = null) {
    $this->ownerMembership = $ownerMembership;
    return $this;
  }

  /**
   * Get ownerMembership
   *
   * @return \Civi\Member\Membership
   */
  public function getOwnerMembership() {
    return $this->ownerMembership;
  }
  
  /**
   * Set maxRelated
   *
   * @param integer $maxRelated
   * @return Membership
   */
  public function setMaxRelated($maxRelated) {
    $this->maxRelated = $maxRelated;
    return $this;
  }

  /**
   * Get maxRelated
   *
   * @return integer
   */
  public function getMaxRelated() {
    return $this->maxRelated;
  }
  
  /**
   * Set isTest
   *
   * @param boolean $isTest
   * @return Membership
   */
  public function setIsTest($isTest) {
    $this->isTest = $isTest;
    return $this;
  }

  /**
   * Get isTest
   *
   * @return boolean
   */
  public function getIsTest() {
    return $this->isTest;
  }
  
  /**
   * Set isPayLater
   *
   * @param boolean $isPayLater
   * @return Membership
   */
  public function setIsPayLater($isPayLater) {
    $this->isPayLater = $isPayLater;
    return $this;
  }

  /**
   * Get isPayLater
   *
   * @return boolean
   */
  public function getIsPayLater() {
    return $this->isPayLater;
  }
  
  /**
   * Set contributionRecur
   *
   * @param \Civi\Contribute\ContributionRecur $contributionRecur
   * @return Membership
   */
  public function setContributionRecur(\Civi\Contribute\ContributionRecur $contributionRecur = null) {
    $this->contributionRecur = $contributionRecur;
    return $this;
  }

  /**
   * Get contributionRecur
   *
   * @return \Civi\Contribute\ContributionRecur
   */
  public function getContributionRecur() {
    return $this->contributionRecur;
  }
  
  /**
   * Set campaign
   *
   * @param \Civi\Campaign\Campaign $campaign
   * @return Membership
   */
  public function setCampaign(\Civi\Campaign\Campaign $campaign = null) {
    $this->campaign = $campaign;
    return $this;
  }

  /**
   * Get campaign
   *
   * @return \Civi\Campaign\Campaign
   */
  public function getCampaign() {
    return $this->campaign;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
      
              'membership_id' => array(
      
        'name' => 'id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Membership ID'),
                        'required' => true,
                                             
                'import' => true,
        'where' => 'civicrm_membership.id',
        'headerPattern' => '/^(m(embership\s)?id)$/i',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'membership_contact_id' => array(
      
        'name' => 'contact_id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Contact ID'),
                        'required' => true,
                                             
                'import' => true,
        'where' => 'civicrm_membership.contact_id',
        'headerPattern' => '/contact(.?id)?/i',
        'dataPattern' => '/^\d+$/',
                         'export' => true,
                                   
                'FKClassName' => 'CRM_Contact_Contact',
                          ),
      
              'membership_type_id' => array(
      
        'name' => 'membership_type_id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Membership Type Id'),
                        'required' => true,
                                             
                'import' => true,
        'where' => 'civicrm_membership.membership_type_id',
        'headerPattern' => '/^(m(embership\s)?type)$/i',
        'dataPattern' => '',
                         'export' => false,
                                   
                'FKClassName' => 'CRM_Member_MembershipType',
                                     'pseudoconstant' => array(
                                'table' => 'civicrm_membership_type',
                      'keyColumn' => 'id',
                      'labelColumn' => 'name',
                    )
                 ),
      
              'join_date' => array(
      
        'name' => 'join_date',
        'type' => CRM_Utils_Type::T_DATE,
                'title' => ts('Member Since'),
                                                     
                'import' => true,
        'where' => 'civicrm_membership.join_date',
        'headerPattern' => '/^join|(j(oin\s)?date)$/i',
        'dataPattern' => '/\d{4}-?\d{2}-?\d{2}/',
                         'export' => true,
                                   
                          ),
      
              'membership_start_date' => array(
      
        'name' => 'start_date',
        'type' => CRM_Utils_Type::T_DATE,
                'title' => ts('Membership Start Date'),
                                                     
                'import' => true,
        'where' => 'civicrm_membership.start_date',
        'headerPattern' => '/(member(ship)?.)?start(s)?(.date$)?/i',
        'dataPattern' => '/\d{4}-?\d{2}-?\d{2}/',
                         'export' => true,
                                   
                          ),
      
              'membership_end_date' => array(
      
        'name' => 'end_date',
        'type' => CRM_Utils_Type::T_DATE,
                'title' => ts('Membership Expiration Date'),
                                                     
                'import' => true,
        'where' => 'civicrm_membership.end_date',
        'headerPattern' => '/(member(ship)?.)?end(s)?(.date$)?/i',
        'dataPattern' => '/\d{4}-?\d{2}-?\d{2}/',
                         'export' => true,
                                   
                          ),
      
              'membership_source' => array(
      
        'name' => 'source',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Source'),
                                 'maxlength' => 128,
                         'size' => CRM_Utils_Type::HUGE,
                           
                'import' => true,
        'where' => 'civicrm_membership.source',
        'headerPattern' => '/^(member(ship?))?source$/i',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'status_id' => array(
      
        'name' => 'status_id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Membership Status Id'),
                        'required' => true,
                                             
                'import' => true,
        'where' => 'civicrm_membership.status_id',
        'headerPattern' => '/(member(ship|).)?(status)$/i',
        'dataPattern' => '',
                         'export' => false,
                                   
                'FKClassName' => 'CRM_Member_MembershipStatus',
                                     'pseudoconstant' => array(
                                'table' => 'civicrm_membership_status',
                      'keyColumn' => 'id',
                      'labelColumn' => 'label',
                    )
                 ),
      
              'is_override' => array(
      
        'name' => 'is_override',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Status Override'),
                                                     
                'import' => true,
        'where' => 'civicrm_membership.is_override',
        'headerPattern' => '/override$/i',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'owner_membership_id' => array(
      
        'name' => 'owner_membership_id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Primary Member ID'),
                                                     
                         'export' => true,
                'where' => 'civicrm_membership.owner_membership_id',
        'headerPattern' => '',
        'dataPattern' => '',
                                   
                'FKClassName' => 'CRM_Member_Membership',
                          ),
      
              'max_related' => array(
      
        'name' => 'max_related',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Max Related'),
                                                     
                                    
                          ),
      
              'member_is_test' => array(
      
        'name' => 'is_test',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Test'),
                                                     
                'import' => true,
        'where' => 'civicrm_membership.is_test',
        'headerPattern' => '/(is.)?test(.member(ship)?)?/i',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'member_is_pay_later' => array(
      
        'name' => 'is_pay_later',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Is Pay Later'),
                                                     
                'import' => true,
        'where' => 'civicrm_membership.is_pay_later',
        'headerPattern' => '/(is.)?(pay(.)?later)$/i',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'contribution_recur_id' => array(
      
        'name' => 'contribution_recur_id',
        'type' => CRM_Utils_Type::T_INT,
                                                     
                                    
                'FKClassName' => 'CRM_Contribute_ContributionRecur',
                          ),
      
              'member_campaign_id' => array(
      
        'name' => 'campaign_id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Campaign'),
                                                     
                'import' => true,
        'where' => 'civicrm_membership.campaign_id',
        'headerPattern' => '',
        'dataPattern' => '',
                         'export' => true,
                                   
                'FKClassName' => 'CRM_Campaign_Campaign',
                                     'pseudoconstant' => array(
                                'table' => 'civicrm_campaign',
                      'keyColumn' => 'id',
                      'labelColumn' => 'title',
                    )
                 ),
             );
    }
    return self::$_fields;
  }

}

