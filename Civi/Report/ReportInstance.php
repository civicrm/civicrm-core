<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Report/ReportInstance.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Core;

use Doctrine\ORM\Mapping as ORM;

/**
 * ReportInstance
 *
 * @ORM\Table(name="civicrm_report_instance", indexes={@ORM\Index(name="FK_civicrm_report_instance_domain_id", columns={"domain_id"}),@ORM\Index(name="FK_civicrm_report_instance_navigation_id", columns={"navigation_id"}),@ORM\Index(name="FK_civicrm_report_instance_drilldown_id", columns={"drilldown_id"})})
 * @ORM\Entity
 */
class ReportInstance extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false)
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var \Civi\Core\Domain
   *
   * @ORM\ManyToOne(targetEntity="Civi\Core\Domain")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="domain_id", referencedColumnName="id")})
   */
  private $domain;
  
  /**
   * @var string
   *
   * @ORM\Column(name="title", type="string", length=255, nullable=true)
   * 
   */
  private $title;
  
  /**
   * @var string
   *
   * @ORM\Column(name="report_id", type="string", length=64, nullable=true)
   * 
   */
  private $reportId;
  
  /**
   * @var string
   *
   * @ORM\Column(name="name", type="string", length=255, nullable=true)
   * 
   */
  private $name;
  
  /**
   * @var string
   *
   * @ORM\Column(name="args", type="string", length=255, nullable=true)
   * 
   */
  private $args;
  
  /**
   * @var string
   *
   * @ORM\Column(name="description", type="string", length=255, nullable=true)
   * 
   */
  private $description;
  
  /**
   * @var string
   *
   * @ORM\Column(name="permission", type="string", length=255, nullable=true)
   * 
   */
  private $permission;
  
  /**
   * @var string
   *
   * @ORM\Column(name="grouprole", type="string", length=1024, nullable=true)
   * 
   */
  private $grouprole;
  
  /**
   * @var text
   *
   * @ORM\Column(name="form_values", type="text", nullable=true)
   * 
   */
  private $formValues;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_active", type="boolean", nullable=true)
   * 
   */
  private $isActive;
  
  /**
   * @var string
   *
   * @ORM\Column(name="email_subject", type="string", length=255, nullable=true)
   * 
   */
  private $emailSubject;
  
  /**
   * @var text
   *
   * @ORM\Column(name="email_to", type="text", nullable=true)
   * 
   */
  private $emailTo;
  
  /**
   * @var text
   *
   * @ORM\Column(name="email_cc", type="text", nullable=true)
   * 
   */
  private $emailCc;
  
  /**
   * @var text
   *
   * @ORM\Column(name="header", type="text", nullable=true)
   * 
   */
  private $header;
  
  /**
   * @var text
   *
   * @ORM\Column(name="footer", type="text", nullable=true)
   * 
   */
  private $footer;
  
  /**
   * @var \Civi\Core\Navigation
   *
   * @ORM\ManyToOne(targetEntity="Civi\Core\Navigation")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="navigation_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $navigation;
  
  /**
   * @var \Civi\Report\ReportInstance
   *
   * @ORM\ManyToOne(targetEntity="Civi\Report\ReportInstance")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="drilldown_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $drilldown;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_reserved", type="boolean", nullable=false)
   * 
   */
  private $isReserved = '0';

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set domain
   *
   * @param \Civi\Core\Domain $domain
   * @return ReportInstance
   */
  public function setDomain(\Civi\Core\Domain $domain = null) {
    $this->domain = $domain;
    return $this;
  }

  /**
   * Get domain
   *
   * @return \Civi\Core\Domain
   */
  public function getDomain() {
    return $this->domain;
  }
  
  /**
   * Set title
   *
   * @param string $title
   * @return ReportInstance
   */
  public function setTitle($title) {
    $this->title = $title;
    return $this;
  }

  /**
   * Get title
   *
   * @return string
   */
  public function getTitle() {
    return $this->title;
  }
  
  /**
   * Set reportId
   *
   * @param string $reportId
   * @return ReportInstance
   */
  public function setReportId($reportId) {
    $this->reportId = $reportId;
    return $this;
  }

  /**
   * Get reportId
   *
   * @return string
   */
  public function getReportId() {
    return $this->reportId;
  }
  
  /**
   * Set name
   *
   * @param string $name
   * @return ReportInstance
   */
  public function setName($name) {
    $this->name = $name;
    return $this;
  }

  /**
   * Get name
   *
   * @return string
   */
  public function getName() {
    return $this->name;
  }
  
  /**
   * Set args
   *
   * @param string $args
   * @return ReportInstance
   */
  public function setArgs($args) {
    $this->args = $args;
    return $this;
  }

  /**
   * Get args
   *
   * @return string
   */
  public function getArgs() {
    return $this->args;
  }
  
  /**
   * Set description
   *
   * @param string $description
   * @return ReportInstance
   */
  public function setDescription($description) {
    $this->description = $description;
    return $this;
  }

  /**
   * Get description
   *
   * @return string
   */
  public function getDescription() {
    return $this->description;
  }
  
  /**
   * Set permission
   *
   * @param string $permission
   * @return ReportInstance
   */
  public function setPermission($permission) {
    $this->permission = $permission;
    return $this;
  }

  /**
   * Get permission
   *
   * @return string
   */
  public function getPermission() {
    return $this->permission;
  }
  
  /**
   * Set grouprole
   *
   * @param string $grouprole
   * @return ReportInstance
   */
  public function setGrouprole($grouprole) {
    $this->grouprole = $grouprole;
    return $this;
  }

  /**
   * Get grouprole
   *
   * @return string
   */
  public function getGrouprole() {
    return $this->grouprole;
  }
  
  /**
   * Set formValues
   *
   * @param text $formValues
   * @return ReportInstance
   */
  public function setFormValues($formValues) {
    $this->formValues = $formValues;
    return $this;
  }

  /**
   * Get formValues
   *
   * @return text
   */
  public function getFormValues() {
    return $this->formValues;
  }
  
  /**
   * Set isActive
   *
   * @param boolean $isActive
   * @return ReportInstance
   */
  public function setIsActive($isActive) {
    $this->isActive = $isActive;
    return $this;
  }

  /**
   * Get isActive
   *
   * @return boolean
   */
  public function getIsActive() {
    return $this->isActive;
  }
  
  /**
   * Set emailSubject
   *
   * @param string $emailSubject
   * @return ReportInstance
   */
  public function setEmailSubject($emailSubject) {
    $this->emailSubject = $emailSubject;
    return $this;
  }

  /**
   * Get emailSubject
   *
   * @return string
   */
  public function getEmailSubject() {
    return $this->emailSubject;
  }
  
  /**
   * Set emailTo
   *
   * @param text $emailTo
   * @return ReportInstance
   */
  public function setEmailTo($emailTo) {
    $this->emailTo = $emailTo;
    return $this;
  }

  /**
   * Get emailTo
   *
   * @return text
   */
  public function getEmailTo() {
    return $this->emailTo;
  }
  
  /**
   * Set emailCc
   *
   * @param text $emailCc
   * @return ReportInstance
   */
  public function setEmailCc($emailCc) {
    $this->emailCc = $emailCc;
    return $this;
  }

  /**
   * Get emailCc
   *
   * @return text
   */
  public function getEmailCc() {
    return $this->emailCc;
  }
  
  /**
   * Set header
   *
   * @param text $header
   * @return ReportInstance
   */
  public function setHeader($header) {
    $this->header = $header;
    return $this;
  }

  /**
   * Get header
   *
   * @return text
   */
  public function getHeader() {
    return $this->header;
  }
  
  /**
   * Set footer
   *
   * @param text $footer
   * @return ReportInstance
   */
  public function setFooter($footer) {
    $this->footer = $footer;
    return $this;
  }

  /**
   * Get footer
   *
   * @return text
   */
  public function getFooter() {
    return $this->footer;
  }
  
  /**
   * Set navigation
   *
   * @param \Civi\Core\Navigation $navigation
   * @return ReportInstance
   */
  public function setNavigation(\Civi\Core\Navigation $navigation = null) {
    $this->navigation = $navigation;
    return $this;
  }

  /**
   * Get navigation
   *
   * @return \Civi\Core\Navigation
   */
  public function getNavigation() {
    return $this->navigation;
  }
  
  /**
   * Set drilldown
   *
   * @param \Civi\Report\ReportInstance $drilldown
   * @return ReportInstance
   */
  public function setDrilldown(\Civi\Report\ReportInstance $drilldown = null) {
    $this->drilldown = $drilldown;
    return $this;
  }

  /**
   * Get drilldown
   *
   * @return \Civi\Report\ReportInstance
   */
  public function getDrilldown() {
    return $this->drilldown;
  }
  
  /**
   * Set isReserved
   *
   * @param boolean $isReserved
   * @return ReportInstance
   */
  public function setIsReserved($isReserved) {
    $this->isReserved = $isReserved;
    return $this;
  }

  /**
   * Get isReserved
   *
   * @return boolean
   */
  public function getIsReserved() {
    return $this->isReserved;
  }

}

