<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Pledge/Pledge.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Core;

use Doctrine\ORM\Mapping as ORM;

/**
 * Pledge
 *
 * @ORM\Table(name="civicrm_pledge", indexes={@ORM\Index(name="index_status", columns={"status_id"}),@ORM\Index(name="FK_civicrm_pledge_contact_id", columns={"contact_id"}),@ORM\Index(name="FK_civicrm_pledge_financial_type_id", columns={"financial_type_id"}),@ORM\Index(name="FK_civicrm_pledge_contribution_page_id", columns={"contribution_page_id"}),@ORM\Index(name="FK_civicrm_pledge_campaign_id", columns={"campaign_id"})})
 * @ORM\Entity
 */
class Pledge extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false)
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var \Civi\Contact\Contact
   *
   * @ORM\ManyToOne(targetEntity="Civi\Contact\Contact")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="contact_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $contact;
  
  /**
   * @var \Civi\Financial\FinancialType
   *
   * @ORM\ManyToOne(targetEntity="Civi\Financial\FinancialType")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="financial_type_id", referencedColumnName="id")})
   */
  private $financialType;
  
  /**
   * @var \Civi\Contribute\ContributionPage
   *
   * @ORM\ManyToOne(targetEntity="Civi\Contribute\ContributionPage")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="contribution_page_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $contributionPage;
  
  /**
   * @var float
   *
   * @ORM\Column(name="amount", type="float", nullable=true)
   * 
   */
  private $amount;
  
  /**
   * @var float
   *
   * @ORM\Column(name="original_installment_amount", type="float", nullable=true)
   * 
   */
  private $originalInstallmentAmount;
  
  /**
   * @var string
   *
   * @ORM\Column(name="currency", type="string", length=3, nullable=false)
   * 
   */
  private $currency = 'NULL';
  
  /**
   * @var string
   *
   * @ORM\Column(name="frequency_unit", type="string", length=8, nullable=false)
   * 
   */
  private $frequencyUnit = 'month';
  
  /**
   * @var integer
   *
   * @ORM\Column(name="frequency_interval", type="integer", nullable=false)
   * 
   */
  private $frequencyInterval = '1';
  
  /**
   * @var integer
   *
   * @ORM\Column(name="frequency_day", type="integer", nullable=false)
   * 
   */
  private $frequencyDay = '3';
  
  /**
   * @var integer
   *
   * @ORM\Column(name="installments", type="integer", nullable=false)
   * 
   */
  private $installments = '1';
  
  /**
   * @var datetime
   *
   * @ORM\Column(name="start_date", type="datetime", nullable=true)
   * 
   */
  private $startDate;
  
  /**
   * @var datetime
   *
   * @ORM\Column(name="create_date", type="datetime", nullable=true)
   * 
   */
  private $createDate;
  
  /**
   * @var datetime
   *
   * @ORM\Column(name="acknowledge_date", type="datetime", nullable=true)
   * 
   */
  private $acknowledgeDate;
  
  /**
   * @var datetime
   *
   * @ORM\Column(name="modified_date", type="datetime", nullable=true)
   * 
   */
  private $modifiedDate;
  
  /**
   * @var datetime
   *
   * @ORM\Column(name="cancel_date", type="datetime", nullable=true)
   * 
   */
  private $cancelDate;
  
  /**
   * @var datetime
   *
   * @ORM\Column(name="end_date", type="datetime", nullable=true)
   * 
   */
  private $endDate;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="max_reminders", type="integer", nullable=false)
   * 
   */
  private $maxReminders = '1';
  
  /**
   * @var integer
   *
   * @ORM\Column(name="initial_reminder_day", type="integer", nullable=false)
   * 
   */
  private $initialReminderDay = '5';
  
  /**
   * @var integer
   *
   * @ORM\Column(name="additional_reminder_day", type="integer", nullable=false)
   * 
   */
  private $additionalReminderDay = '5';
  
  /**
   * @var integer
   *
   * @ORM\Column(name="status_id", type="integer", nullable=true)
   * 
   */
  private $statusId;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_test", type="boolean", nullable=false)
   * 
   */
  private $isTest = '0';
  
  /**
   * @var \Civi\Campaign\Campaign
   *
   * @ORM\ManyToOne(targetEntity="Civi\Campaign\Campaign")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="campaign_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $campaign;

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set contact
   *
   * @param \Civi\Contact\Contact $contact
   * @return Pledge
   */
  public function setContact(\Civi\Contact\Contact $contact = null) {
    $this->contact = $contact;
    return $this;
  }

  /**
   * Get contact
   *
   * @return \Civi\Contact\Contact
   */
  public function getContact() {
    return $this->contact;
  }
  
  /**
   * Set financialType
   *
   * @param \Civi\Financial\FinancialType $financialType
   * @return Pledge
   */
  public function setFinancialType(\Civi\Financial\FinancialType $financialType = null) {
    $this->financialType = $financialType;
    return $this;
  }

  /**
   * Get financialType
   *
   * @return \Civi\Financial\FinancialType
   */
  public function getFinancialType() {
    return $this->financialType;
  }
  
  /**
   * Set contributionPage
   *
   * @param \Civi\Contribute\ContributionPage $contributionPage
   * @return Pledge
   */
  public function setContributionPage(\Civi\Contribute\ContributionPage $contributionPage = null) {
    $this->contributionPage = $contributionPage;
    return $this;
  }

  /**
   * Get contributionPage
   *
   * @return \Civi\Contribute\ContributionPage
   */
  public function getContributionPage() {
    return $this->contributionPage;
  }
  
  /**
   * Set amount
   *
   * @param float $amount
   * @return Pledge
   */
  public function setAmount($amount) {
    $this->amount = $amount;
    return $this;
  }

  /**
   * Get amount
   *
   * @return float
   */
  public function getAmount() {
    return $this->amount;
  }
  
  /**
   * Set originalInstallmentAmount
   *
   * @param float $originalInstallmentAmount
   * @return Pledge
   */
  public function setOriginalInstallmentAmount($originalInstallmentAmount) {
    $this->originalInstallmentAmount = $originalInstallmentAmount;
    return $this;
  }

  /**
   * Get originalInstallmentAmount
   *
   * @return float
   */
  public function getOriginalInstallmentAmount() {
    return $this->originalInstallmentAmount;
  }
  
  /**
   * Set currency
   *
   * @param string $currency
   * @return Pledge
   */
  public function setCurrency($currency) {
    $this->currency = $currency;
    return $this;
  }

  /**
   * Get currency
   *
   * @return string
   */
  public function getCurrency() {
    return $this->currency;
  }
  
  /**
   * Set frequencyUnit
   *
   * @param string $frequencyUnit
   * @return Pledge
   */
  public function setFrequencyUnit($frequencyUnit) {
    $this->frequencyUnit = $frequencyUnit;
    return $this;
  }

  /**
   * Get frequencyUnit
   *
   * @return string
   */
  public function getFrequencyUnit() {
    return $this->frequencyUnit;
  }
  
  /**
   * Set frequencyInterval
   *
   * @param integer $frequencyInterval
   * @return Pledge
   */
  public function setFrequencyInterval($frequencyInterval) {
    $this->frequencyInterval = $frequencyInterval;
    return $this;
  }

  /**
   * Get frequencyInterval
   *
   * @return integer
   */
  public function getFrequencyInterval() {
    return $this->frequencyInterval;
  }
  
  /**
   * Set frequencyDay
   *
   * @param integer $frequencyDay
   * @return Pledge
   */
  public function setFrequencyDay($frequencyDay) {
    $this->frequencyDay = $frequencyDay;
    return $this;
  }

  /**
   * Get frequencyDay
   *
   * @return integer
   */
  public function getFrequencyDay() {
    return $this->frequencyDay;
  }
  
  /**
   * Set installments
   *
   * @param integer $installments
   * @return Pledge
   */
  public function setInstallments($installments) {
    $this->installments = $installments;
    return $this;
  }

  /**
   * Get installments
   *
   * @return integer
   */
  public function getInstallments() {
    return $this->installments;
  }
  
  /**
   * Set startDate
   *
   * @param datetime $startDate
   * @return Pledge
   */
  public function setStartDate($startDate) {
    $this->startDate = $startDate;
    return $this;
  }

  /**
   * Get startDate
   *
   * @return datetime
   */
  public function getStartDate() {
    return $this->startDate;
  }
  
  /**
   * Set createDate
   *
   * @param datetime $createDate
   * @return Pledge
   */
  public function setCreateDate($createDate) {
    $this->createDate = $createDate;
    return $this;
  }

  /**
   * Get createDate
   *
   * @return datetime
   */
  public function getCreateDate() {
    return $this->createDate;
  }
  
  /**
   * Set acknowledgeDate
   *
   * @param datetime $acknowledgeDate
   * @return Pledge
   */
  public function setAcknowledgeDate($acknowledgeDate) {
    $this->acknowledgeDate = $acknowledgeDate;
    return $this;
  }

  /**
   * Get acknowledgeDate
   *
   * @return datetime
   */
  public function getAcknowledgeDate() {
    return $this->acknowledgeDate;
  }
  
  /**
   * Set modifiedDate
   *
   * @param datetime $modifiedDate
   * @return Pledge
   */
  public function setModifiedDate($modifiedDate) {
    $this->modifiedDate = $modifiedDate;
    return $this;
  }

  /**
   * Get modifiedDate
   *
   * @return datetime
   */
  public function getModifiedDate() {
    return $this->modifiedDate;
  }
  
  /**
   * Set cancelDate
   *
   * @param datetime $cancelDate
   * @return Pledge
   */
  public function setCancelDate($cancelDate) {
    $this->cancelDate = $cancelDate;
    return $this;
  }

  /**
   * Get cancelDate
   *
   * @return datetime
   */
  public function getCancelDate() {
    return $this->cancelDate;
  }
  
  /**
   * Set endDate
   *
   * @param datetime $endDate
   * @return Pledge
   */
  public function setEndDate($endDate) {
    $this->endDate = $endDate;
    return $this;
  }

  /**
   * Get endDate
   *
   * @return datetime
   */
  public function getEndDate() {
    return $this->endDate;
  }
  
  /**
   * Set maxReminders
   *
   * @param integer $maxReminders
   * @return Pledge
   */
  public function setMaxReminders($maxReminders) {
    $this->maxReminders = $maxReminders;
    return $this;
  }

  /**
   * Get maxReminders
   *
   * @return integer
   */
  public function getMaxReminders() {
    return $this->maxReminders;
  }
  
  /**
   * Set initialReminderDay
   *
   * @param integer $initialReminderDay
   * @return Pledge
   */
  public function setInitialReminderDay($initialReminderDay) {
    $this->initialReminderDay = $initialReminderDay;
    return $this;
  }

  /**
   * Get initialReminderDay
   *
   * @return integer
   */
  public function getInitialReminderDay() {
    return $this->initialReminderDay;
  }
  
  /**
   * Set additionalReminderDay
   *
   * @param integer $additionalReminderDay
   * @return Pledge
   */
  public function setAdditionalReminderDay($additionalReminderDay) {
    $this->additionalReminderDay = $additionalReminderDay;
    return $this;
  }

  /**
   * Get additionalReminderDay
   *
   * @return integer
   */
  public function getAdditionalReminderDay() {
    return $this->additionalReminderDay;
  }
  
  /**
   * Set statusId
   *
   * @param integer $statusId
   * @return Pledge
   */
  public function setStatusId($statusId) {
    $this->statusId = $statusId;
    return $this;
  }

  /**
   * Get statusId
   *
   * @return integer
   */
  public function getStatusId() {
    return $this->statusId;
  }
  
  /**
   * Set isTest
   *
   * @param boolean $isTest
   * @return Pledge
   */
  public function setIsTest($isTest) {
    $this->isTest = $isTest;
    return $this;
  }

  /**
   * Get isTest
   *
   * @return boolean
   */
  public function getIsTest() {
    return $this->isTest;
  }
  
  /**
   * Set campaign
   *
   * @param \Civi\Campaign\Campaign $campaign
   * @return Pledge
   */
  public function setCampaign(\Civi\Campaign\Campaign $campaign = null) {
    $this->campaign = $campaign;
    return $this;
  }

  /**
   * Get campaign
   *
   * @return \Civi\Campaign\Campaign
   */
  public function getCampaign() {
    return $this->campaign;
  }

}

