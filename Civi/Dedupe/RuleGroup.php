<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Dedupe/RuleGroup.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Dedupe;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;

/**
 * RuleGroup
 *
 * @ORM\Table(name="civicrm_dedupe_rule_group")
 * @ORM\Entity
 */
class RuleGroup extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var string
   *
   * @ORM\Column(name="contact_type", type="string", length=12, nullable=true)
   * 
   */
  private $contactType;
  
  /**
   * @var integer
   *
   * @ORM\Column(name="threshold", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $threshold;
  
  /**
   * @var string
   *
   * @ORM\Column(name="used", type="string", length=12, nullable=true)
   * 
   */
  private $used;
  
  /**
   * @var string
   *
   * @ORM\Column(name="name", type="string", length=64, nullable=true)
   * 
   */
  private $name;
  
  /**
   * @var string
   *
   * @ORM\Column(name="title", type="string", length=255, nullable=true)
   * 
   */
  private $title;
  
  /**
   * @var boolean
   *
   * @ORM\Column(name="is_reserved", type="boolean", nullable=true)
   * 
   */
  private $isReserved;

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set contactType
   *
   * @param string $contactType
   * @return RuleGroup
   */
  public function setContactType($contactType) {
    $this->contactType = $contactType;
    return $this;
  }

  /**
   * Get contactType
   *
   * @return string
   */
  public function getContactType() {
    return $this->contactType;
  }
  
  /**
   * Set threshold
   *
   * @param integer $threshold
   * @return RuleGroup
   */
  public function setThreshold($threshold) {
    $this->threshold = $threshold;
    return $this;
  }

  /**
   * Get threshold
   *
   * @return integer
   */
  public function getThreshold() {
    return $this->threshold;
  }
  
  /**
   * Set used
   *
   * @param string $used
   * @return RuleGroup
   */
  public function setUsed($used) {
    $this->used = $used;
    return $this;
  }

  /**
   * Get used
   *
   * @return string
   */
  public function getUsed() {
    return $this->used;
  }
  
  /**
   * Set name
   *
   * @param string $name
   * @return RuleGroup
   */
  public function setName($name) {
    $this->name = $name;
    return $this;
  }

  /**
   * Get name
   *
   * @return string
   */
  public function getName() {
    return $this->name;
  }
  
  /**
   * Set title
   *
   * @param string $title
   * @return RuleGroup
   */
  public function setTitle($title) {
    $this->title = $title;
    return $this;
  }

  /**
   * Get title
   *
   * @return string
   */
  public function getTitle() {
    return $this->title;
  }
  
  /**
   * Set isReserved
   *
   * @param boolean $isReserved
   * @return RuleGroup
   */
  public function setIsReserved($isReserved) {
    $this->isReserved = $isReserved;
    return $this;
  }

  /**
   * Get isReserved
   *
   * @return boolean
   */
  public function getIsReserved() {
    return $this->isReserved;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
      
              'id' => array(
      
        'name' => 'id',
        'type' => CRM_Utils_Type::T_INT,
                        'required' => true,
                                             
                                    
                          ),
      
              'contact_type' => array(
      
        'name' => 'contact_type',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Contact Type'),
                                 'maxlength' => 12,
                         'size' => CRM_Utils_Type::TWELVE,
                           
                                    
                                     'pseudoconstant' => array(
                                'table' => 'civicrm_contact_type',
                      'keyColumn' => 'name',
                      'labelColumn' => 'label',
                      'condition' => 'parent_id IS NULL',
                    )
                 ),
      
              'threshold' => array(
      
        'name' => 'threshold',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Threshold'),
                        'required' => true,
                                             
                                    
                          ),
      
              'used' => array(
      
        'name' => 'used',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Used'),
                        'required' => true,
                         'maxlength' => 12,
                         'size' => CRM_Utils_Type::TWELVE,
                           
                                    
                                     'pseudoconstant' => array(
                                '0' => 'not in database',
                    )
                 ),
      
              'name' => array(
      
        'name' => 'name',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Name'),
                                 'maxlength' => 64,
                         'size' => CRM_Utils_Type::BIG,
                           
                                    
                          ),
      
              'title' => array(
      
        'name' => 'title',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Title'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'is_reserved' => array(
      
        'name' => 'is_reserved',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                                                     
                                    
                          ),
             );
    }
    return self::$_fields;
  }

}

