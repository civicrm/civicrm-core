<?php
/*
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC. All rights reserved.                        |
 |                                                                    |
 | This work is published under the GNU AGPLv3 license with some      |
 | permitted exceptions and without any warranty. For full license    |
 | and copyright information, see https://civicrm.org/licensing       |
 +--------------------------------------------------------------------+
 */

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 */

/**
 * Autogenerated SettingPage form.
 * @see CRM_Utils_Hook::alterSettingsPages()
 */
class CRM_Admin_Form_SettingPage extends CRM_Core_Form {

  use CRM_Admin_Form_SettingTrait;

  protected $_settings = [];

  protected $settingPage;

  public function preProcess() {
    $this->addSettingsToFormFromMetadata();
    // Load setting page metadata
    $settingPages = [];
    CRM_Utils_Hook::alterSettingsPages($settingPages);
    $settingPageName = $this->getSettingPageFilter();
    if (!isset($settingPages[$settingPageName])) {
      throw new CRM_Core_Exception(ts('Invalid setting page: %1', [1 => $settingPageName]));
    }
    $this->settingPage = $settingPages[$settingPageName];
  }

  public function buildQuickForm() {
    $this->addButtons([
      [
        'type' => 'next',
        'name' => ts('Save'),
        'isDefault' => TRUE,
      ],
      [
        'type' => 'cancel',
        'name' => ts('Cancel'),
      ],
    ]);
    $filter = $this->getSettingPageFilter();
    $settings = $this->getSettingsMetaData();
    $sections = $this->getSections();
    foreach ($settings as $settingName => &$setting) {
      $added = $this->addSettingFieldToForm($settingName, $setting);
      if ($added) {
        $setting['has_help'] = !empty($setting['help_text']) || !empty($setting['help_markup']);
        $placement = $setting['settings_pages'][$filter];
        $section = $placement['section'] ?? '';
        $sections[$section]['fields'][$settingName] = $setting;
      }
    }
    $sections = array_filter($sections, fn($section) => !empty($section['fields']));

    $this->assign('settingPageName', $filter);
    $this->assign('settingPage', $this->settingPage);
    $this->assign('settingSections', $sections);

    $this->addFormRule(['CRM_Admin_Form_SettingPage', 'formRule'], $settings);
  }

  public function setDefaultValues() {
    if (!$this->_defaults) {
      $this->_defaults = [];
      $this->setDefaultsForMetadataDefinedFields();
    }
    return $this->_defaults;
  }

  /**
   * Process the form submission.
   */
  public function postProcess() {
    $params = $this->controller->exportValues($this->_name);
    try {
      $this->saveMetadataDefinedSettings($params);
      CRM_Core_Session::setStatus(ts('%1 Saved.', [1 => $this->settingPage['title']]), ts('Saved'), 'success');
      CRM_Core_Session::singleton()->pushUserContext(CRM_Utils_System::url('civicrm/admin', 'reset=1'));
    }
    catch (CRM_Core_Exception $e) {
      CRM_Core_Session::setStatus($e->getMessage(), ts('Save Failed'), 'error');
    }
  }

  private function getSections(): array {
    $sections = $this->settingPage['sections'] ?? [];

    // Default section for uncategorized settings
    $sections += ['' => []];
    $sections['']['weight'] ??= PHP_INT_MIN;

    uasort($sections, ['CRM_Utils_Sort', 'cmpFunc']);
    return $sections;
  }

  /**
   * Setting validation form rule.
   *
   * @param array $fields
   *   The input form values.
   * @param array $files
   * @param array $settings
   *   Settings metadata
   *
   * @return bool|array
   *   true if no errors, else array of errors
   */
  public static function formRule($fields, $files, $settings) {
    $errors = [];

    foreach ($settings as $settingName => $settingMeta) {
      if (!empty($settingMeta['validate_callback'])) {
        $errorText = NULL;
        $callback = Civi\Core\Resolver::singleton()->get($settingMeta['validate_callback']);
        // These validate_callbacks are inconsistent. Some return FALSE, others throw an Exception.
        try {
          $value = self::formatSettingValue($settingMeta, $fields[$settingName] ?? NULL);
          $valid = call_user_func_array($callback, [$value, $settingMeta]);
        }
        catch (CRM_Core_Exception $e) {
          $valid = FALSE;
          $errorText = $e->getMessage();
        }
        if (!$valid) {
          $errors[$settingName] = $errorText ?: ts('Invalid value for %1', [1 => $settingMeta['title']]);
        }
      }
      // Add validation for number fields. Don't worry too much about the message text as it shouldn't ever be seen; number inputs are constrained clientside.
      if ($settingMeta['type'] === 'Integer' && is_string($fields[$settingName] ?? NULL) && strlen($fields[$settingName])) {
        if (!CRM_Utils_Rule::integer($fields[$settingName])) {
          $errors[$settingName] = ts('Invalid value for %1', [1 => $settingMeta['title']]);
        }
        if (isset($settingMeta['html_attributes']['min']) && $fields[$settingName] < $settingMeta['html_attributes']['min']) {
          $errors[$settingName] = ts('Invalid value for %1', [1 => $settingMeta['title']]);
        }
        if (isset($settingMeta['html_attributes']['max']) && $fields[$settingName] > $settingMeta['html_attributes']['max']) {
          $errors[$settingName] = ts('Invalid value for %1', [1 => $settingMeta['title']]);
        }
      }
    }

    return empty($errors) ? TRUE : $errors;
  }

}
