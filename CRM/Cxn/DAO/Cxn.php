<?php
/*
+--------------------------------------------------------------------+
| CiviCRM version 4.7                                                |
+--------------------------------------------------------------------+
| Copyright CiviCRM LLC (c) 2004-2017                                |
+--------------------------------------------------------------------+
| This file is a part of CiviCRM.                                    |
|                                                                    |
| CiviCRM is free software; you can copy, modify, and distribute it  |
| under the terms of the GNU Affero General Public License           |
| Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
|                                                                    |
| CiviCRM is distributed in the hope that it will be useful, but     |
| WITHOUT ANY WARRANTY; without even the implied warranty of         |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
| See the GNU Affero General Public License for more details.        |
|                                                                    |
| You should have received a copy of the GNU Affero General Public   |
| License and the CiviCRM Licensing Exception along                  |
| with this program; if not, contact CiviCRM LLC                     |
| at info[AT]civicrm[DOT]org. If you have questions about the        |
| GNU Affero General Public License or the licensing of CiviCRM,     |
| see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+--------------------------------------------------------------------+
*/
/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2017
 *
 * Generated from xml/schema/CRM/Cxn/Cxn.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:72b767c4b9d246ef1efb8b9c7c5b6312)
 */
require_once 'CRM/Core/DAO.php';
require_once 'CRM/Utils/Type.php';
/**
 * CRM_Cxn_DAO_Cxn constructor.
 */
class CRM_Cxn_DAO_Cxn extends CRM_Core_DAO {
  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  static $_tableName = 'civicrm_cxn';
  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var boolean
   */
  static $_log = false;
  /**
   * Connection ID
   *
   * @var int unsigned
   */
  public $id;
  /**
   * Application GUID
   *
   * @var string
   */
  public $app_guid;
  /**
   * Application Metadata (JSON)
   *
   * @var text
   */
  public $app_meta;
  /**
   * Connection GUID
   *
   * @var string
   */
  public $cxn_guid;
  /**
   * Shared secret
   *
   * @var text
   */
  public $secret;
  /**
   * Permissions approved for the service (JSON)
   *
   * @var text
   */
  public $perm;
  /**
   * Options for the service (JSON)
   *
   * @var text
   */
  public $options;
  /**
   * Is connection currently enabled?
   *
   * @var boolean
   */
  public $is_active;
  /**
   * When was the connection was created.
   *
   * @var timestamp
   */
  public $created_date;
  /**
   * When the connection was created or modified.
   *
   * @var timestamp
   */
  public $modified_date;
  /**
   * The last time the application metadata was fetched.
   *
   * @var timestamp
   */
  public $fetched_date;
  /**
   * Class constructor.
   */
  function __construct() {
    $this->__table = 'civicrm_cxn';
    parent::__construct();
  }
  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = array(
        'id' => array(
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Connection ID') ,
          'description' => 'Connection ID',
          'required' => true,
          'table_name' => 'civicrm_cxn',
          'entity' => 'Cxn',
          'bao' => 'CRM_Cxn_BAO_Cxn',
        ) ,
        'app_guid' => array(
          'name' => 'app_guid',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Application GUID') ,
          'description' => 'Application GUID',
          'maxlength' => 128,
          'size' => CRM_Utils_Type::HUGE,
          'table_name' => 'civicrm_cxn',
          'entity' => 'Cxn',
          'bao' => 'CRM_Cxn_BAO_Cxn',
        ) ,
        'app_meta' => array(
          'name' => 'app_meta',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Application Metadata (JSON)') ,
          'description' => 'Application Metadata (JSON)',
          'table_name' => 'civicrm_cxn',
          'entity' => 'Cxn',
          'bao' => 'CRM_Cxn_BAO_Cxn',
        ) ,
        'cxn_guid' => array(
          'name' => 'cxn_guid',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Connection GUID') ,
          'description' => 'Connection GUID',
          'maxlength' => 128,
          'size' => CRM_Utils_Type::HUGE,
          'table_name' => 'civicrm_cxn',
          'entity' => 'Cxn',
          'bao' => 'CRM_Cxn_BAO_Cxn',
        ) ,
        'secret' => array(
          'name' => 'secret',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Secret') ,
          'description' => 'Shared secret',
          'table_name' => 'civicrm_cxn',
          'entity' => 'Cxn',
          'bao' => 'CRM_Cxn_BAO_Cxn',
        ) ,
        'perm' => array(
          'name' => 'perm',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Perm') ,
          'description' => 'Permissions approved for the service (JSON)',
          'table_name' => 'civicrm_cxn',
          'entity' => 'Cxn',
          'bao' => 'CRM_Cxn_BAO_Cxn',
        ) ,
        'options' => array(
          'name' => 'options',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Options') ,
          'description' => 'Options for the service (JSON)',
          'table_name' => 'civicrm_cxn',
          'entity' => 'Cxn',
          'bao' => 'CRM_Cxn_BAO_Cxn',
        ) ,
        'is_active' => array(
          'name' => 'is_active',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Is Active') ,
          'description' => 'Is connection currently enabled?',
          'default' => '1',
          'table_name' => 'civicrm_cxn',
          'entity' => 'Cxn',
          'bao' => 'CRM_Cxn_BAO_Cxn',
        ) ,
        'created_date' => array(
          'name' => 'created_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => ts('Created Date') ,
          'description' => 'When was the connection was created.',
          'required' => false,
          'default' => 'NULL',
          'table_name' => 'civicrm_cxn',
          'entity' => 'Cxn',
          'bao' => 'CRM_Cxn_BAO_Cxn',
        ) ,
        'modified_date' => array(
          'name' => 'modified_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => ts('Modified Date') ,
          'description' => 'When the connection was created or modified.',
          'required' => false,
          'default' => 'CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_cxn',
          'entity' => 'Cxn',
          'bao' => 'CRM_Cxn_BAO_Cxn',
        ) ,
        'fetched_date' => array(
          'name' => 'fetched_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => ts('Fetched Date') ,
          'description' => 'The last time the application metadata was fetched.',
          'required' => false,
          'default' => 'NULL',
          'table_name' => 'civicrm_cxn',
          'entity' => 'Cxn',
          'bao' => 'CRM_Cxn_BAO_Cxn',
        ) ,
      );
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }
  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }
  /**
   * Returns the names of this table
   *
   * @return string
   */
  static function getTableName() {
    return self::$_tableName;
  }
  /**
   * Returns if this table needs to be logged
   *
   * @return boolean
   */
  function getLog() {
    return self::$_log;
  }
  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &import($prefix = false) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'cxn', $prefix, array());
    return $r;
  }
  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &export($prefix = false) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'cxn', $prefix, array());
    return $r;
  }
}
