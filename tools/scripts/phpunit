#!/usr/bin/env php
<?php

/**
 * In the past, Civi bundled a hacked copy of PHPUnit used like:
 *
 *   cd tools
 *   ./scripts/phpunit Some_Class_NameTest
 *
 * This script is an adapter for backwards compatibility.
 */

if (PHP_SAPI !== 'cli') {
  die("phpunit can only be run from command line.");
}

$phpunit = findCommand('phpunit4');
if (!$phpunit) {
  $phpunit = findCommand('phpunit');
}
if (!$phpunit) {
  echo "Plesae ensure that:\n";
  echo " * PHPUnit is installed.\n";
  echo " * The extensions for dbunit and selenium are installed.\n" ;
  echo " * The command \"phpunit\" is in the PATH.\n";
  echo "See also: https://github.com/civicrm/civicrm-buildkit/\n";
  exit(127);
}

chdir(dirname(dirname(__DIR__))); // civicrm-core root dir

array_shift($argv);

// Convert class names to file names
$CIVICRM_UF = 'UnitTests';
foreach ($argv as $k => $v) {
  if (preg_match('/^(CRM_|api_v3_|EnvTest|WebTest_|E2E_)/', $v)) {
    $argv[$k] = 'tests/phpunit/' . strtr($v, '_', '/') . '.php';
  }
  elseif (preg_match('/^Civi\\\\/', $v)) {
    $argv[$k] = 'tests/phpunit/' . strtr($v, '\\', '/') . '.php';
  }

  if (preg_match('/^(WebTest|E2E)/', $v)) {
    $CIVICRM_UF='';
  }
}
putenv("CIVICRM_UF=$CIVICRM_UF");

// Transition: Make sure we use phpunit code from PATH, not
// civicrm-packages.  This will be unnecessary once civicrm-packages is
// updated.
if (is_dir('packages/PHPUnit/')) {
  if (!rename('packages/PHPUnit', 'packages/PHPUnit.bak')) {
    echo "Failed to move aside stale copy of PHPUnit.\n";
    exit(1);
  }
}

$cmd =
  findPhp() // In case this system has multiple copies of PHP, use the active/preferred one.
  // . ' -ddisplay_errors=1'
  . ' '
  . escapeshellarg($phpunit)
  . ' '
  . implode(' ', array_map('escapeshellarg', $argv));
passthru($cmd);

function findPhp() {
  if (defined('PHP_BINARY')) {
    return PHP_BINARY; // php 5.4+
  } elseif (defined('PHP_BINDIR') && file_exists(PHP_BINDIR . '/php')) {
    return PHP_BINDIR . '/php'; // php 5.3
  } else {
    die("Failed to determine active PHP version.");
  }
}

function findCommand($name) {
  $paths = explode(PATH_SEPARATOR, getenv('PATH'));
  foreach ($paths as $path) {
    if (file_exists("$path/$name")) {
      return "$path/$name";
    }
  }
  return NULL;
}
