<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.1                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2011                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2011
 * $Id$
 *
 */

define('CIVICRM_GIFTAID_TASKID', 1435);

/**
 * Implements hook_menu().
 */
function civicrm_giftaid_menu() {
  $items = array();

  $items['admin/config/system/gift-aid'] = array(
    'title' => 'Gift Aid Settings',
    'description' => 'Configure Gift Aid Basic Rate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('giftaid_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'civicrm_giftaid.admin.inc',
  );
  return $items;
}

function civicrm_giftaid_civicrm_config(&$config) {
  $template = &CRM_Core_Smarty::singleton();

  $giftAidRoot = dirname(__FILE__);

  $giftAidDir = $giftAidRoot . DIRECTORY_SEPARATOR . 'templates';

  if (is_array($template->template_dir)) {
    array_unshift($template->template_dir, $giftAidDir);
  }
  else {
    $template->template_dir = array($giftAidDir, $template->template_dir);
  }

  // also fix php include path
  $include_path = $giftAidRoot . PATH_SEPARATOR . get_include_path();
  set_include_path($include_path);
}

function civicrm_giftaid_civicrm_searchTasks($objectType, &$tasks) {
  if ($objectType == 'contribution') {
    $tasks[CIVICRM_GIFTAID_TASKID] = array('title' => ts('Add to Gift Aid batch'),
      'class' => 'GiftAid_Form_Task_AddToGiftAid',
      'result' => FALSE,
    );
  }
}


/*
 * Implementation of hook_civicrm_custom
 * Create / update Gift Aid declaration records on Individual when
 * "Eligible for Gift Aid" field on Contribution is updated.
 */
function civicrm_giftaid_civicrm_custom($op, $groupID, $entityID, &$params) {
  /* TODO && $op != 'edit' */

  if ($op != 'create'
  ) {
    return;
  }

  require_once 'CRM/Core/DAO.php';
  $tableName = CRM_Core_DAO::getFieldValue('CRM_Core_DAO_CustomGroup', $groupID, 'table_name', 'id');
  if ($tableName == 'civicrm_value_gift_aid_submission') {
    // Iterate through $params to get new declaration value
    $newStatus = NULL;
    if (!is_array($params) || empty($params)) {
      return;
    }

    foreach ($params as $field) {
      if ($field['column_name'] == 'eligible_for_gift_aid') {
        $newStatus = $field['value'];
        break;
      }
    }

    if (is_null($newStatus)) {
      return;
    }

    // Get contactID.
    $sql = "SELECT contact_id, receive_date FROM civicrm_contribution WHERE id = %1";
    $dao = CRM_Core_DAO::executeQuery($sql, array(1 => array($entityID, 'Integer')));
    if ($dao->fetch()) {
      $contactID = $dao->contact_id;
      $contributionDate = $dao->receive_date;
    }

    if ($contactID) {
      require_once 'GiftAid/Utils/GiftAid.php';
      $params = array(
        'entity_id' => $contactID,
        'eligible_for_gift_aid' => $newStatus,
        'start_date' => $contributionDate,
      );
      GiftAid_Utils_GiftAid::setDeclaration($params);
    }
  }
}

/*
 * Implementation of hook_civicrm_validate
 * Validate set of Gift Aid declaration records on Individual,
 * from multi-value custom field edit form:
 * - check end > start,
 * - check for overlaps between declarations.
 */
function civicrm_giftaid_civicrm_validate($formName, &$fields, &$files, &$form) {
  $errors = array();

  if ($formName == 'CRM_Contact_Form_CustomData') {

    $groupID = $form->getVar('_groupID');
    require_once 'CRM/Core/DAO.php';
    $tableName = CRM_Core_DAO::getFieldValue('CRM_Core_DAO_CustomGroup', $groupID, 'table_name', 'id');
    if ($tableName == 'civicrm_value_gift_aid_declaration') {

      // Assemble multi-value field values from custom_X_Y into
      // array $declarations of sets of values as column_name => value
      $sql         = "SELECT id, column_name FROM civicrm_custom_field WHERE custom_group_id = %1";
      $dao         = CRM_Core_DAO::executeQuery($sql, array(1 => array($groupID, 'Integer')));
      $columnNames = array();
      while ($dao->fetch()) {
        $columnNames[$dao->id] = $dao->column_name;
      }

      $declarations = array();
      foreach ($fields as $name => $value) {
        if (preg_match('/^custom_(\d+)_(-?\d+)$/', $name, $matches)) {
          $columnName = CRM_Utils_Array::value($matches[1], $columnNames);
          if ($columnName) {
            $declarations[$matches[2]][$columnName]['value'] = $value;
            $declarations[$matches[2]][$columnName]['name'] = $name;
          }
        }
      }

      require_once 'CRM/Utils/Date.php';
      // Iterate through each distinct pair of declarations, checking for overlap.
      foreach ($declarations as $id1 => $values1) {
        $start1 = CRM_Utils_Date::processDate($values1['start_date']['value']);
        if ($values1['end_date']['value'] == '') {
          $end1 = '25000101000000';
        }
        else {
          $end1 = CRM_Utils_Date::processDate($values1['end_date']['value']);
        }
        if ($values1['end_date']['value'] != '' && $start1 >= $end1) {
          $errors[$values1['end_date']['name']] = 'End date must be later than start date.';
          continue;
        }
        $charity1 = NULL;
        if (array_key_exists('charity', $values1)) {
          $charity1 = CRM_Utils_Array::value('value', $values1['charity']);
        }
        foreach ($declarations as $id2 => $values2) {
          $charity2 = NULL;
          if (array_key_exists('charity', $values2)) {
            $charity2 = CRM_Utils_Array::value('value', $values2['charity']);
          }
          if (($id2 <= $id1) || ($charity1 != $charity2)) {
            continue;
          }
          $start2 = CRM_Utils_Date::processDate($values2['start_date']['value']);
          if ($values2['end_date']['value'] == '') {
            $end2 = '25000101000000';
          }
          else {
            $end2 = CRM_Utils_Date::processDate($values2['end_date']['value']);
          }

          if ($start1 < $end2 && $end1 > $start2) {
            $message = 'This declaration overlaps with the one from ' . $values2['start_date']['value'];
            if ($values2['end_date']['value']) {
              $message .= ' to ' . $values2['end_date']['value'];
            }
            $errors[$values1['start_date']['name']] = $message;
            $message = 'This declaration overlaps with the one from ' . $values1['start_date']['value'];
            if ($values1['end_date']['value']) {
              $message .= ' to ' . $values1['end_date']['value'];
            }
            $errors[$values2['start_date']['name']] = $message;
          }
        }
      }
    }
  }
  if (!empty($errors)) {
    return $errors;
  }
}

