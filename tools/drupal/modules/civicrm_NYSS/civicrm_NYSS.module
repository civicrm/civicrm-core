<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.1                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2011                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License along with this program; if not, contact CiviCRM LLC       |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2011
 * $Id$
 *
 */

/**
 * freeeze address fields of location type 'Board Of Election' on contact edit form
 *
 * @return void
 * @access public
 */
function civicrm_NYSS_civicrm_buildForm($formName, &$form) {
  if ($formName == 'CRM_Contact_Form_Search_Advanced') {
    require_once 'CRM/Core/Form/Tag.php';
    require_once 'CRM/Core/BAO/Tag.php';
    $parentNames = CRM_Core_BAO_Tag::getTagSet('civicrm_contact');
    CRM_Core_Form_Tag::buildQuickForm($form, $parentNames, 'civicrm_contact', NULL, TRUE, TRUE);
  }
  elseif ($formName == 'CRM_Contact_Form_Contact') {
    //do not allow to edit as well as set 'Board of Election' loc type.
    require_once 'CRM/Core/PseudoConstant.php';
    require_once 'CRM/Utils/Request.php';
    require_once 'CRM/Core/BAO/Preferences.php';
    $blocks = array('Email' => 'email',
      'Phone' => 'phone',
      'IM' => 'im',
      'OpenID' => 'openid',
      'Address' => 'address',
    );

    $blockId   = CRM_Utils_Request::retrieve('count', 'Positive', CRM_Core_DAO::$_nullObject);
    $blockName = CRM_Utils_Request::retrieve('block', 'String', CRM_Core_DAO::$_nullObject);
    $values    = $form->_values;
    if (!empty($_POST)) {
      $values = $_POST;
    }

    $locationTypes = CRM_Core_PseudoConstant::locationType();
    $boardOfElectionId = CRM_Utils_Array::key('BOE', $locationTypes);

    $addressOptions = $form->get('addressOptions');
    if (!isset($addressOptions)) {
      $addressOptions = CRM_Core_BAO_Preferences::valueOptions('address_options', TRUE, NULL, TRUE);
      $form->set('addressOptions', $addressOptions);
    }

    //its a first block.
    if (!$blockId) {
      $blockId = 1;
    }
    foreach ($blocks as $label => $name) {
      if (($blockId != 1) && ($blockName != $label)) {
        continue;
      }
      $freezeElement = $unsetOption = FALSE;
      if (CRM_Utils_Array::value($name, $values) && is_array($values[$name]) &&
        $boardOfElectionId == CRM_Utils_Array::value('location_type_id',
          $values[$name][$blockId]
        )
      ) {
        $freezeElement = TRUE;
      }
      else {
        $unsetOption = TRUE;
      }

      if ($name == 'address') {
        foreach ($addressOptions as $key => $value) {
          if (empty($value)) {
            continue;
          }
          if (in_array($key, array('country', 'state_province')) && $freezeElement) {
            $key .= '_id';

            //we might registered duplicate elements.
            if ($key == 'state_province_id') {
              if (array_key_exists("address[$blockId][$key]", $form->_duplicateIndex)) {
                $duplicateIndexes = $form->_duplicateIndex["address[$blockId][$key]"];
                foreach ($duplicateIndexes as $index) {
                  $element = $form->_elements[$index];
                  $element->freeze();
                }
              }
            }
          }

          //process address data element.
          _civicrm_processElement($form, "address[$blockId][$key]", $freezeElement);
        }
        //hide 'Use Household Address' if location type is 'Board Of Election'
        if ($blockId == 1 && $freezeElement) {
          $form->removeElement("use_household_address");
        }
      }
      else {
        $dataElementName = "{$name}[$blockId][$name]";
        if ($name == 'im') {
          $dataElementName = "{$name}[$blockId][name]";
          _civicrm_processElement($form, "{$name}[$blockId][provider_id]", $freezeElement);
        }
        elseif ($name == 'phone') {
          _civicrm_processElement($form, "{$name}[$blockId][phone_type_id]", $freezeElement);
        }

        //process data element.
        _civicrm_processElement($form, $dataElementName, $freezeElement);
      }

      //process loc type element.
      _civicrm_processElement($form, "{$name}[$blockId][location_type_id]", $freezeElement, $unsetOption);
    }
  }
}

/**
 * process the elements on the form
 *
 * @return void
 * @access public
 */
function _civicrm_processElement(&$form, $elementName, $freezeElement = FALSE, $unsetOption = FALSE) {
  if (!$form->elementExists($elementName)) {
    return FALSE;
  }

  $element = $form->getElement($elementName);
  if ($freezeElement) {
    $element->freeze();
  }

  if ($unsetOption) {
    foreach ($element->_options as $index => $options) {
      if ($options['text'] != 'BOE' &&
        $options['text'] != 'Billing' &&
        $options['text'] != 'NCOA'
      ) {
        $newOptions[] = $element->_options[$index];
      }
    }

    $element->_options = $newOptions;
  }
}

