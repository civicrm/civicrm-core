<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.7                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2016                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License along with this program; if not, contact CiviCRM LLC       |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2016
 * $Id$
 *
 */

define('MULTICURRENCY_EVENT_ID_1', 4);
define('MULTICURRENCY_EVENT_ID_2', 8);
define('DISCOUNT_EVENT_ID_1', 4);
define('DISCOUNT_EVENT_ID_2', 8);
/**
 * @param $formName
 * @param $form
 */
function multicurrency_civicrm_buildForm($formName,
  &$form
) {
  if ((strpos($formName, 'CRM_Event_Form_Registration_') !== FALSE) &&
    (($form->getVar('_eventId') == MULTICURRENCY_EVENT_ID_1) ||
      ($form->getVar('_eventId') == MULTICURRENCY_EVENT_ID_2)
    )
  ) {
    multicurrency_set_currency($form);
  }

  //------- Coupon field --------//
  if ($formName == 'CRM_Event_Form_Registration_Register' &&
    (($form->getVar('_eventId') == DISCOUNT_EVENT_ID_1) ||
      ($form->getVar('_eventId') == DISCOUNT_EVENT_ID_2)
    )
  ) {
    $form->addElement('text', 'discountCode', ts('Discount Code'));

    // also assign to template
    $template = &CRM_Core_Smarty::singleton();
    $beginHookFormElements = $template->get_template_vars('beginHookFormElements');
    if (!$beginHookFormElements) {
      $beginHookFormElements = array();
    }
    $beginHookFormElements[] = 'discountCode';
    //$form->assign( 'beginHookFormElements', $beginHookFormElements );

    $discountCode = CRM_Utils_Request::retrieve('discountCode', 'String', $form, FALSE, NULL, $_REQUEST);
    if ($discountCode) {
      $defaults = array('discountCode' => $discountCode);
      $form->setDefaults($defaults);
    }
  }
}

/**
 * @param $form
 *
 * @return string
 */
function multicurrency_set_currency(&$form) {
  static $processed = FALSE;

  if ($processed) {
    return;
  }

  $processed = TRUE;
  $currency  = CRM_Utils_Request::retrieve('currency', 'String', $form, FALSE, 'GBP');
  $config    = &CRM_Core_Config::singleton();
  if (strtoupper($currency) == 'EUR') {
    $config->defaultCurrency = 'EUR';
  }
  else {
    $config->defaultCurrency = 'GBP';
  }

  return $config->defaultCurrency;
}

/**
 * @param $pageType
 * @param $form
 * @param $amount
 */
function multicurrency_civicrm_buildAmount($pageType,
  &$form,
  &$amount
) {

  // only modify the event pages for the UK event
  if (($form->getVar('_eventId') == MULTICURRENCY_EVENT_ID_1) ||
    ($form->getVar('_eventId') == MULTICURRENCY_EVENT_ID_2)
  ) {
    $currency = multicurrency_set_currency($form);

    // as of may 5th: 1 USD = 0.75 EUR, 1 USD = 0.667 GBP
    $ratio = ($currency == 'EUR') ? 0.75 : (2.0 / 3.0);

    foreach ($amount as $amountID => & $amountInfo) {
      $amountInfo['value'] = ceil($amountInfo['value'] * $ratio);
    }
  }

  //---- DISCOUNT Code ----//
  $eventID = $form->getVar('_eventId');
  if ($pageType != 'event' ||
    ($eventID != DISCOUNT_EVENT_ID_1 && $eventID != DISCOUNT_EVENT_ID_2)
  ) {
    return;
  }

  $discountCode = CRM_Utils_Request::retrieve('discountCode', 'String', $form, FALSE, NULL, $_REQUEST);
  if (!$discountCode) {
    return;
  }

  list($discountID, $discountPercent, $discountNumber) = _multicurrency_discountHelper($eventID, $discountCode);
  if ($discountNumber <= 0) {
    // no more discount left
    return;
  }

  foreach ($amount as $amountId => $amountInfo) {
    $amount[$amountId]['value'] = $amount[$amountId]['value'] - ceil($amount[$amountId]['value'] * $discountPercent / 100);
    $amount[$amountId]['label'] = $amount[$amountId]['label'] . "\t - with {$discountPercent}% discount";
  }
}

/**
 * @param $page
 */
function multicurrency_civicrm_pageRun(&$page) {

  if ($page->getVar('_name') == 'CRM_Event_Page_EventInfo' &&
    (($page->getVar('_id') == MULTICURRENCY_EVENT_ID_1) ||
      ($page->getVar('_id') == MULTICURRENCY_EVENT_ID_2)
    )
  ) {
    multicurrency_set_currency($page);
  }
}

//---- Discount using codes ------//
/**
 * @param $eventID
 * @param $discountCode
 *
 * @return array
 */
function _multicurrency_discountHelper($eventID, $discountCode) {
  $sql = "
SELECT v.id as id, v.value as value, v.weight as weight
FROM   civicrm_option_value v,
       civicrm_option_group g
WHERE  v.option_group_id = g.id
AND    v.name = %1
AND    g.name = %2

";
  $params = array(1 => array($discountCode, 'String'),
    2 => array("event_discount_{$eventID}", 'String'),
  );
  $dao = CRM_Core_DAO::executeQuery($sql, $params);
  if ($dao->fetch()) {
    // ensure discountPercent is a valid numeric number <= 100
    if ($dao->value &&
      is_numeric($dao->value) &&
      $dao->value >= 0 &&
      $dao->value <= 100 &&
      is_numeric($dao->weight)
    ) {
      return array($dao->id, $dao->value, $dao->weight);
    }
  }
  return array(NULL, NULL, NULL);
}

/*
 * The hook updates the random code used with event signup.
 */
/**
 * @param $class
 * @param $form
 */
function multicurrency_civicrm_postProcess($class, &$form) {
  $eventID = $form->getVar('_eventId');
  if (!is_a($form, 'CRM_Event_Form_Registration_Confirm') ||
    ($eventID != DISCOUNT_EVENT_ID_1 && $eventID != DISCOUNT_EVENT_ID_2)
  ) {
    return;
  }

  $discountCode = CRM_Utils_Request::retrieve('discountCode', 'String', $form, FALSE, NULL, $_REQUEST);
  if (!$discountCode) {
    return;
  }

  list($discountID, $discountPercent, $discountNumber) = _multicurrency_discountHelper($eventID, $discountCode);
  if (!$discountID ||
    $discountNumber <= 0 ||
    $discountNumber == 123456789
  ) {
    return;
  }

  $query = "
UPDATE civicrm_option_value v
SET    v.weight = v.weight - 1
WHERE  v.id = %1
AND    v.weight > 0
";
  $params = array(1 => array($discountID, 'Integer'));

  CRM_Core_DAO::executeQuery($query, $params);
}

