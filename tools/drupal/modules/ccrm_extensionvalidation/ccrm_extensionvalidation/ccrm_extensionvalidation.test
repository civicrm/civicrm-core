<?php

/**
 * @file
 * Tests for ccrm_extensionvalidation.module.
 */

/**
 * Tests version validation/formatting logic
 */
class CcrmExtensionValidatationTestCase extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Version Formatting',
      'description' => 'Tests version validation/formatting logic',
      'group' => 'ccrm_extensionvalidation',
    );
  }

  public function setUp() {
    parent::setUp();
    module_load_include('version.inc', 'ccrm_extensionvalidation');
  }

  public function testIsValid() {
    $valids = array(
      '1',
      '1.1',
      '1.2.3.4',
      '1.2-3',
      '1.2.alpha2',
      '1.2.rc2',
      '2012-01-01-1',
      '2012-01-01',
      'r456',
      'r5000',
    );
    $invalids = array(
      'Four',
      '1.2 alpha',
      '1 2',
      '1.2-a',
      '1/2',
      '1,2',
      '1.2-generalrelease',
      '123456789', // exceeds padding limit
      '20120101', // exceeds padding limit
      '20120101124556', // exceeds padding limit
      'XIV',
      '1.pre10',
    );

    foreach ($valids as $valid) {
      $this->assertEqual(
        TRUE,
        ccrm_extensionvalidation_version_isValid($valid),
        "Expected that '$valid' is valid"
      );
    }
    foreach ($invalids as $invalid) {
      $this->assertEqual(
        FALSE,
        ccrm_extensionvalidation_version_isValid($invalid),
        "Expected that '$invalid' is invalid"
      );
    }
  }

  public function testSortNormalizedValues() {
    $cases = array(
      array('1.alpha1', '1.alpha2', '1.beta', '1.0', '1.0.1', '1.1'),
      array('1.alpha.1', '1.beta2','1.rc1'),
      array('4.2.alpha1', '4.2.alpha2', '4.2.beta1', '4.2.beta2', '4.2.0'),
      array('1.9', '1.9.1', '1.10', '1.10.1'),
      array('r1', 'r9', 'r10', 'r900', 'r1001'),
      array('1', '2', '9', '10', '11'),
      array('1.0', '1.1', '2.0', '2.1', '3.0', '3.1'),
    );
    foreach ($cases as $case) {
      $expectedOrder = array();
      foreach ($case as $ver) {
        $expectedOrder[] = ccrm_extensionvalidation_version_normalize($ver);
      }

      // shuffle and sort using MySQL ordering
      $actualOrder = $expectedOrder;
      shuffle($actualOrder);
      //$actualOrder = self::sqlSort($actualOrder);
      usort($actualOrder, array(__CLASS__, 'cmpSql'));

      // did we get it right?
      $this->assertEqual($expectedOrder, $actualOrder);
    }
  }

  public function testSplit() {
    $cases = array(
      '1' => array('z0000001'),
      '1.1' => array('z0000001', 'z0000001'),
      '1.2.3.4' => array('z0000001', 'z0000002', 'z0000003', 'z0000004'),
      '1.2-3' => array('z0000001', 'z0000002', 'z0000003'),
      '1.2.alpha2' => array('z0000001', 'z0000002', 'pre010', 'z0000002'),
      '1.2beta2' => array('z0000001', 'z0000002', 'pre020', 'z0000002'),
      '2012-01-01-1' => array('z0002012', 'z0000001', 'z0000001', 'z0000001'),
      '20120101' => array('invalid'),
      'r456' => array('z0000456'),
      'r5000' => array('z0005000'),
      'whiz' => array('whiz'),
    );
    foreach ($cases as $input => $expect) {
      $actual = ccrm_extensionvalidation_version_split($input, CCRM_VALIDATEEXTRELEASE_PAD);
      $this->assertEqual($actual, $expect, sprintf("input=[%s] expect=[%s] actual=[%s]",
        $input,
        implode('/', $expect),
        implode('/', $actual)
      ));
    }
  }


  /**
   * Sort a list using MySQL's default sort for VARCHARs
   *
  static protected function sqlSort($values) {
    db_query("CREATE TEMPORARY TABLE tmp_sort (value VARCHAR(128)) ENGINE=MEMORY")->execute();

    foreach ($values as $value) {
      db_query("INSERT INTO tmp_sort (value) VALUES ('$value')");
      //db_query("INSERT INTO tmp_sort (value) VALUES (:value)", array(
      //  ':value' => $value,
      //));
    }
    $result = array();
    $q = db_query("SELECT value FROM tmp_sort ORDER BY value");
    $q->execute();
    while ($row = $q->fetchAssoc()) {
      $result[] = $row['value'];
    }

    db_query("DROP TEMPORARY TABLE tmp_sort")->execute();
    return $result;
  } */

  /**
   * Compare two values using MySQL string comparison
   *
   * Note: SQL injection because WTF but doesn't matter because inputs are controlled test data
   */
  static protected function cmpSql($a, $b) {
    // Note: SQL injection from test data
    $q = db_query("SELECT IF('$a' < '$b', 'lt','gte') as lt, IF('$a' = '$b', 'eq','ne') as eq");
    /*
    $q = db_query("SELECT IF(:a < :b,'lt','gte') as lt, IF(:a = :b,'eq','ne') as eq", array(
      ':a' => $a,
      ':b' => $b,
    ));
    */
    $q->execute();
    $res = $q->fetchAssoc();

    if ($res['eq'] == 'eq') {
      return 0;
    } elseif ($res['lt'] == 'lt') {
      return -1;
    } else {
      return 1;
    }
  }
}
