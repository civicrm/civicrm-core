<?php

define('CCRM_EXTVALID_XMLFILE_FIELD', 'field_extension_release_xml');

/**
 * Loads and Validates fields from the XML info file:
 * Release version == <version> (required)
 * Release Date == <releaseDate>
 * Release Status == <develStage> (required)
 * Release CiviCRM Compatibility == <compatibility><ver> (required)(multiple ok)
 * Parent Extension FQN == <extension key="xx.yy.zz"> (required)
 * Documentation Link == <url desc="http://example.com">
 * (Postponed) Download URL > downloadUrl (required)
 * TODO: Fully validate the XML document format against a DOCtype
 */

  /**
   *
   * implements hook_node_validate
   */
  function ccrm_extensionvalidation_node_validate($node, $form, &$form_state) {
    // Make sure author of extension is in maintainers
    if ('extension' == $node->type) {
      $authornid = $node->uid;  $delta = 0;  $foundauthor = FALSE;
      foreach ($form_state['values']['field_maintainers'][LANGUAGE_NONE] as $index => $ref) {
        if (is_numeric($ref['target_id'])
            && $form_state['values']['field_maintainers'][LANGUAGE_NONE][$index]['target_id'] == $authornid) {
          $foundauthor = TRUE;
        }
        $delta++;
      }
      if (FALSE == $foundauthor) {
        $form_state['values']['field_maintainers'][LANGUAGE_NONE][$delta]['target_id'] = $authornid;
        $form_state['values']['field_maintainers'][LANGUAGE_NONE][$delta]['_weight'] = $delta;
      }
    }
    // Set maintainers on releases from parent extension
    if ($node->type == 'extension_release_civicrm') {
      $parentnid = $node->field_extension_nr_crm[LANGUAGE_NONE][0]['nid'];
    }
    if ($node->type == 'extension_release_cms') {
      $parentnid = $node->field_extension_nr_cms[LANGUAGE_NONE][0]['nid'];
    }
    if ($node->type == 'extension_release_civicrm' || $node->type == 'extension_release_cms') {
      $parent_node = is_numeric($parentnid) ? node_load($parentnid) : NULL;
      if (NULL == $parent_node) {
        _ccrmextvalid_formseterror('title', t('Could not determine parent extension. Please add via extension page.'));
        return;
      }
    }
    if ($node->type == 'extension_release_cms') {
      // Delete current maintainers
      foreach ($form_state['values']['field_extension_release_na_mains'][LANGUAGE_NONE] as $index => $ref) {
        if (is_numeric($ref['target_id'])) {
          $form_state['values']['field_extension_release_na_mains'][LANGUAGE_NONE][$index]['target_id'] = NULL;
        }
      }
      // Check parent node has maintainers set and add maintainers from parent
      $delta = 0;
      foreach ($parent_node->field_maintainers[LANGUAGE_NONE] as $index => $ref) {
        if (is_numeric($ref['target_id'])) {
          $form_state['values']['field_extension_release_na_mains'][LANGUAGE_NONE][$index]['target_id'] = $ref['target_id'];
          $form_state['values']['field_extension_release_na_mains'][LANGUAGE_NONE][$index]['_weight'] = $delta++;
        }
      }
    }
    if ($node->type == 'extension_release_civicrm') {
      // Delete current maintainers
      foreach ($form_state['values']['field_extension_release_ci_mains'][LANGUAGE_NONE] as $index => $ref) {
        if (is_numeric($ref['target_id'])) {
          $form_state['values']['field_extension_release_ci_mains'][LANGUAGE_NONE][$index]['target_id'] = NULL;
        }
      }
      // Check parent node has maintainers set and add maintainers from parent
      $delta = 0;
      foreach ($parent_node->field_maintainers[LANGUAGE_NONE] as $index => $ref) {
        if (is_numeric($ref['target_id'])) {
          $form_state['values']['field_extension_release_ci_mains'][LANGUAGE_NONE][$index]['target_id'] = $ref['target_id'];
          $form_state['values']['field_extension_release_ci_mains'][LANGUAGE_NONE][$index]['_weight'] = $delta++;
        }
      }
    }
    if ($node->type == 'extension_release_civicrm') {
      _ccrmextvalid_validatexml($node, $form, &$form_state, $parent_node);
    }
  }

/**
 * @param $node
 * @param $form
 * @param $form_state
 * @param $parent_node
 */
function _ccrmextvalid_validatexml($node, $form, &$form_state, $parent_node) {
    $keeperrors =  array();
    $file_id = $form_state['values'][CCRM_EXTVALID_XMLFILE_FIELD][LANGUAGE_NONE][0]['fid'];

    if ($file_id != 0) {
      $file = file_load($file_id);
      if ($file) {
        libxml_use_internal_errors(TRUE);
        $doc = new DOMDocument();
        $doc->recover = TRUE;
        $doc->strictErrorChecking = FALSE;

        if ($doc->load(drupal_realpath($file->uri))) {
          // Initialize variables to be read
          $got = array('version' => FALSE, 'releaseDate' => FALSE, 'develStage' => FALSE,
            'ver' => FALSE, 'extension' => FALSE, 'documentation' => FALSE); //'downloadUrl' =>FALSE (postponed)
          foreach ($got as $tag => $tagcontents) {
            $wegotit =  _ccrmextvalid_validateTag($node, $form, $form_state, $doc, $tag, $tagcontents, $keeperrors, $parent_node);
            $got[$tag] = $tagcontents;
            if ($wegotit) {
              _ccrmextvalid_assignTag($form, &$form_state, $tag, &$tagcontents);
            }
            else {
              if ($tag == 'extension') {
                _ccrmextvalid_seterror('title', t("The Fully Qualified Name in the XML file did not match parent extension: @tagcont",
                    array('@tagcont' => $tagcontents)), $keeperrors);
               }
               else {
                 _ccrmextvalid_seterror('title', t("The Extension Release XML file contained an invalid or empty value for tag '@tag'",
                     array('@tag' => $tag)), $keeperrors);
               }
             }
           }
         }
         else {
           _ccrmextvalid_seterror( 'title', t('The XML file could not be read'), $keeperrors);
         }
       }
     }
     else {
       _ccrmextvalid_seterror( CCRM_EXTVALID_XMLFILE_FIELD, t('Please upload an XML file descriptor'), $keeperrors);
     }
     if (!empty($keeperrors)) {
       _ccrmextvalid_formseterror($keeperrors);
     }
  }

  // return whether we had a
/**
 * @param $node
 * @param $form
 * @param $form_state
 * @param $doc
 * @param $tag
 * @param $tagcontents
 * @param $keeperrors
 * @param $parent_node
 *
 * @return bool
 */
function _ccrmextvalid_validateTag($node, $form, &$form_state, $doc, $tag, &$tagcontents, &$keeperrors, $parent_node) {
    $gotit = FALSE; $tagcount = 0; $contents = '';
    switch ($tag) {
      case 'version':
      case 'releaseDate':
      case 'develStage':
      case 'downloadUrl':
        $tagcount = _ccrmextvalid_getOneReqdByTag($doc, $tag, &$tagcontents);
        break;
      case 'ver':
        $tagcount = _ccrmextvalid_getByTag($doc, $tag, &$tagcontents);
        break;
      case 'documentation':
        $domnodes = $doc->getElementsByTagName('url');
        $tagcount = $domnodes->length;
        foreach ($domnodes as $node) {
          if ($node->hasAttributes()) {
            $attrib = $node->attributes->getNamedItem('desc');
            if (strtolower($attrib->value) == "documentation") {
              $tagcontents = $node->nodeValue;
            }
          }
        }
        break;
      case 'extension':
        $domnodes = $doc->getElementsByTagName('extension');
        $tagcount = $domnodes->length;
        if ($tagcount == 1) {
          $elmt = $domnodes->item(0);
          if ($elmt->hasAttributes()) {
            $tagcontents = $elmt->getAttribute('key');
          }
        }
        break;
      default:
        drupal_set_message(t('Invalid tag used in _ccrmextvalid_validateTag: @tag',  array('@tag' => $tag)));
          return FALSE;
    }
    if ($tagcount > 0) {
      switch ($tag) {
        case 'version':
          module_load_include('version.inc', 'ccrm_extensionvalidation');
          if (ccrm_extensionvalidation_version_isValid($tagcontents)) {
            $contents = $tagcontents;
            $gotit = TRUE;
          }
          break;
        case 'releaseDate':
          $tmp = filter_var($tagcontents, FILTER_SANITIZE_STRING);
          if (preg_match('/\d{4}-\d{2}-\d{2}/', $tmp)) {
            //$contents = new DateObject($tagcontents, NULL);
            $contents = $tmp;
            $gotit = TRUE;
          }
          break;
        case 'develStage':
          $contents =  _ccrmextvalid_checkallowedval($tagcontents, 'field_extension_release_status');
          if ($contents && (count($contents) == 1)) {
            $gotit = TRUE;
          }
          $contents = $contents[0];
          break;
        case 'ver':
          if ($tagcount == 1) {
            $tagcontents = array($tagcontents);
          }
          $vers = array_map('_ccrmextvalid_mapversionval', $tagcontents);
          $okvers = _ccrmextvalid_checkallowedval($vers, 'field_extension_release_civicrm');
          if (count($okvers) == count($vers)) {
            $gotit = TRUE;
            $contents = array_map('_ccrmextvalid_mapversionvaltid', $okvers);
          }
          break;
        case 'documentation':
          $contents = filter_var($tagcontents, FILTER_VALIDATE_URL);
          $gotit = TRUE;
          break;
        case 'extension':
          $parentkey = isset($parent_node) ? $parent_node->field_extension_fq_name[LANGUAGE_NONE][0]['safe_value'] : NULL;
          $contents = $parentkey . ' vs. ' . $tagcontents;
          if ($tagcontents == $parentkey) {
            $gotit = TRUE;
          }
          break;
        default:
          return FALSE;
      }
      $tagcontents = $contents;
    }
    return $gotit;
  }

/**
 * @param $form
 * @param $form_state
 * @param $tag
 * @param $tagcontents
 */
function _ccrmextvalid_assignTag($form, &$form_state, $tag, &$tagcontents) {
    // Add $tagcontents to $form_state
    switch ($tag) {
      case 'version':
        module_load_include('version.inc', 'ccrm_extensionvalidation');
        $form_state['values']['field_extension_release_version'][LANGUAGE_NONE][0]['value'] = t('Version @ver', array('@ver' => $tagcontents));
        $form_state['values']['field_extension_release_vc'][LANGUAGE_NONE][0]['value'] = ccrm_extensionvalidation_version_normalize($tagcontents);
        break;
      case 'releaseDate':
        $form_state['values']['field_extension_release_date'][LANGUAGE_NONE][0]['value'] = $tagcontents;
        break;
      case 'develStage':
        $form_state['values']['field_extension_release_status'][LANGUAGE_NONE][0]['value'] = $tagcontents;
        break;
      case 'downloadUrl':
        $form_state['values']['field_extension_release_url'][LANGUAGE_NONE][0]['url'] = $tagcontents;
        break;
      case 'ver':
        $form_state['values']['field_extension_release_civicrm'][LANGUAGE_NONE] = $tagcontents;
        break;
      case 'documentation':
        $form_state['values']['field_documentation'][LANGUAGE_NONE][0]['url'] = $tagcontents;
        break;
    }
  }

  // Get the value of a single tag from the XML that should only have one value
/**
 * @param $doc
 * @param $tagname
 * @param $values
 *
 * @return mixed
 */
function _ccrmextvalid_getOneReqdByTag($doc, $tagname, &$values) {
    $defaultval = $values;
    $tagcount = _ccrmextvalid_getByTag($doc, $tagname, &$values);
    if ($tagcount > 1) {
      form_set_error(CCRM_EXTVALID_XMLFILE_FIELD,
        t("XML file must contain only one '@tagname' element"), array('tagname' => $tagname));
    }
    return $tagcount;
  }

  // Get all tags by value from the XML
/**
 * @param $doc
 * @param $tagname
 * @param $values
 *
 * @return mixed
 */
function _ccrmextvalid_getByTag($doc, $tagname, &$values) {
    $domnodes = $doc->getElementsByTagName($tagname);
    $nodecount = $domnodes->length;
    if ($nodecount > 0) {
      if ($nodecount > 1) {
        $values = array();
        for ($i = 0; $i < $domnodes->length; $i++) {
        $values[] = $domnodes->item($i)->nodeValue;
        }
      }
      else {
        $values = $domnodes->item(0)->nodeValue;
      }
    }
    return $nodecount;

  }

  // Compare a value with the allowed values (lower case)
/**
 * @param $vals
 * @param $fieldname
 *
 * @return array
 */
function _ccrmextvalid_checkallowedval($vals, $fieldname) {
    $retvals = array();
    $vals = !is_array($vals) ? array($vals) : $vals;
    $fld = field_info_field($fieldname);
    if ($fld['type'] == 'taxonomy_term_reference') {
      $allowedvals1 = taxonomy_allowed_values($fld);
    }
    elseif ($fld['type'] == 'list_text') {
      $allowedvals1 = list_allowed_values(field_info_field($fieldname));
    }
    else {
      // No other field types handled
      return $retvals;
    }
    // Taxonomy tags search in values, list search in keys
    $allowedvals = array_map('strtolower', $allowedvals1);
    foreach ($vals as $key => $val) {
      if ($fld['type'] == 'list_text') {
        if (array_key_exists($val, $allowedvals)) {
          $retvals[] = $val;
        }
      }
      else {
        $retvals = array_merge($retvals, array_keys($allowedvals, $val));
      }
    }
    return $retvals;
  }

  // Little helper function for array_map
/**
 * @param $val
 *
 * @return string
 */
function _ccrmextvalid_mapversionval($val) {
    return "civicrm {$val}";
  }

  // Little helper function for array_map
/**
 * @param $val
 *
 * @return array
 */
function _ccrmextvalid_mapversionvaltid($val) {
    return array( 'tid' => $val);
  }

/**
 * @param $name
 * @param $message
 * @param $keeperrors
 */
function _ccrmextvalid_seterror( $name, $message, &$keeperrors) {
    // Form_set_error can only happen once on an element so collect the errors
    $keeperrors[$name] = empty($keeperrors[$name]) ? $message : $keeperrors[$name] . " " . $message;
  }

/**
 * @param $errors
 */
function _ccrmextvalid_formseterror($errors) {
    foreach ($errors as $name => $err) {
      // No other field is working reliably, tried the file upload button & others so usually use title
      form_set_error(check_plain($name), check_plain($err));
    }
  }
