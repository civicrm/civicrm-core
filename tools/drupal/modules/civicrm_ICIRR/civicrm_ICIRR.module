<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.1                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2011                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License along with this program; if not, contact CiviCRM LLC       |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2011
 * $Id$
 *
 */

/**
 * Implementation of civicrn postProcess hook
 *
 * @return void
 * @access public
 */
function civicrm_ICIRR_civicrm_postProcess($formName, &$form) {
  //profile id = 31 for New NAI Contact profile
  $profileId = $form->getVar('_gid');
  $contactId = $form->getVar('_id');
  // if gid = 31 then redirect to new activity
  if (($formName == 'CRM_Profile_Form_Edit') && $profileId == 31) {
    // build activity url, activity type id = 51 for NAI Open
    // redirect to activity url
    $url = CRM_Utils_System::url('civicrm/activity/add', 'action=add&reset=1&selectedChild=activity&atype=51&cid=' . $contactId);
    CRM_Utils_System::redirect($url);
  }
  elseif ($formName == 'CRM_Activity_Form_Activity') {
    $params = $form->exportValues();
    $profileId = CRM_Utils_Array::value('profile_id', $params);

    if (!$profileId) {
      return;
    }

    //build contact params
    $contactParams = array();
    foreach ($params as $key => $value) {
      if (array_key_exists($key, $form->_profileFields)) {
        $contactParams[$key] = $value;
      }
    }

    $contactParams['preserveDBName'] = TRUE;

    $contactId = $params['target_contact_id'];
    if ($contactId && !empty($contactParams)) {
      //crm_core_error::debug( 'c', $contactParams );
      require_once 'CRM/Contact/BAO/Contact.php';
      CRM_Contact_BAO_Contact::createProfileContact($contactParams, $form->_profileFields, $contactId);
    }
  }
}

/**
 * Implementation of civicrn postProcess hook
 *
 * @return void
 * @access public
 */
function civicrm_ICIRR_civicrm_buildForm($formName, &$form) {
  if ($formName == 'CRM_Activity_Form_Activity') {
    if ($form->_action & (CRM_Core_Action::DELETE | CRM_Core_Action::RENEW)) {
      return;
    }

    $includeProfile = CRM_Utils_Array::value('includeProfile', $_GET);
    $form->assign('includeProfile', FALSE);

    if ($includeProfile) {
      $form->assign('includeProfile', TRUE);
      $form->assign('suppressForm', TRUE);
      require_once 'ICIRR/Form/Profile.php';
      ICIRR_Form_Profile::buildProfile($form);
    }
    else {
      require_once 'ICIRR/Form/Profile.php';
      ICIRR_Form_Profile::buildProfile($form);
    }
  }
}

/**
 * Implementation of civicrn validate hook
 *
 * @return void
 * @access public
 */
function civicrm_ICIRR_civicrm_validate($formName, &$fields, &$files, &$form) {
  if ($formName == 'CRM_Activity_Form_Activity') {
    if ($form->_action & (CRM_Core_Action::DELETE | CRM_Core_Action::RENEW)) {
      return TRUE;
    }

    if (in_array($form->_activityTypeId, array(51, 47, 48, 49, 50))) {
      // make sure only one target contact is selected
      $targetContacts = explode(',', $fields['target_contact_id']);
      $errors = array();
      if (empty($targetContacts[0])) {
        $errors['target_contact_id'] = ts('You need to select at least one With Contact.');
      }
      elseif (count($targetContacts) > 1) {
        $errors['target_contact_id'] = ts('You cannot selected more than one With Contact.');
      }
      return empty($errors) ? TRUE : $errors;
    }
  }
}

/**
 * Implementation of config hook to set custom template
 *
 * @return void
 * @access public
 */
function civicrm_ICIRR_civicrm_config(&$config) {
  $template = &CRM_Core_Smarty::singleton();

  $currentRoot = dirname(__FILE__);

  $currentDir = $currentRoot . DIRECTORY_SEPARATOR . 'templates';

  if (is_array($template->template_dir)) {
    array_unshift($template->template_dir, $currentDir);
  }
  else {
    $template->template_dir = array($currentDir, $template->template_dir);
  }

  // also fix php include path
  $include_path = $currentRoot . PATH_SEPARATOR . get_include_path();
  set_include_path($include_path);
}

