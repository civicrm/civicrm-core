<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.1                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2011                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2011
 * $Id$
 *
 */

// ******** Support for pending contribution based on the giftaid value ********* //
define('CIVICRM_GIFTAID_PENDING_CONTRIBUTION', 1);

// ******** Support for multiple charities ********* //
define('CIVICRM_GIFTAID_CHARITY_DECLARATION_CF_NAME', 'charity');
define('CIVICRM_GIFTAID_CHARITY_SUBMISSION_CF_NAME', 'charity');

// ******** Contribution types automatically set as not eligable for gift aid ******** //
// enter comma separated values for multiple contribution types
define('CIVICRM_GIFTAID_NOT_ELIGIBLE_CONTRIBUTION_TYPES', '');
function civicrm_giftaid_civicrm_batchContributions($batchID, $contributionsAdded) {
  if (!CIVICRM_GIFTAID_PENDING_CONTRIBUTION) {
    return;
  }

  // get financial account.
  $contributionTypes = array_flip(CRM_Contribute_PseudoConstant::contributionType());
  $contributionTypeId = $contributionTypes['Gift Aid'];

  if (!$contributionTypeId ||
    empty($contributionsAdded)
  ) {
    CRM_Core_Error::fatal('Required resources missing for creating pending contribution.');
  }

  $query = "SELECT sum(gift_add_submission.gift_aid_amount) 
FROM civicrm_value_gift_aid_submission gift_add_submission 
WHERE entity_id IN (" . implode(',', $contributionsAdded) . ")";
  $totalAmount = CRM_Core_DAO::singleValueQuery($query);

  $config = CRM_Core_Config::singleton();
  $session = CRM_Core_Session::singleton();

  // get contribution status
  $contributionStatus = array_flip(CRM_Contribute_PseudoConstant::contributionStatus());
  $contributionStatusId = $contributionStatus['Pending'];

  // create a pending contribution
  $contribParams = array('contact_id' => $session->get('userID'),
    'financial_account_id' => $contributionTypeId,
    'receive_date' => date('YmdHis'),
    'total_amount' => $totalAmount,
    'invoice_id' => md5(uniqid(rand(), TRUE)),
    'currency' => $config->defaultCurrency,
    'source' => ts('Gift aid batch'),
    'contribution_status_id' => $contributionStatusId,
  );
  $pendingContribution = &CRM_Contribute_BAO_Contribution::add($contribParams, CRM_Core_DAO::$_nullArray);

  // and add to the batch - $batchID
  $batchContribution = new CRM_Batch_DAO_EntityBatch();
  $batchContribution->entity_table = 'civicrm_contribution';
  $batchContribution->entity_id = $pendingContribution->id;
  $batchContribution->batch_id = $batchID;
  $batchContribution->save();
}

function civicrm_giftaid_civicrm_giftAidEligible(&$isEligible, $contactID, $date, $contributionID) {
  if ($isEligible &&
    $contactID &&
    $contributionID &&
    CIVICRM_GIFTAID_CHARITY_DECLARATION_CF_NAME &&
    CIVICRM_GIFTAID_CHARITY_SUBMISSION_CF_NAME
  ) {

    // ************* Support for multiple charities **************** //
    // Note there is no point processing further if $isEligible is false, which is based on declaration date

    $cgID = _civicrm_giftaid_getCustomGroupID('Gift_Aid');
    if (!$cgID) {
      return;
    }

    $charity = NULL;
    if ($contributionID &&
      CRM_Core_DAO::checkFieldExists('civicrm_value_gift_aid_submission', 'charity')
    ) {
      $charity = CRM_Core_DAO::singleValueQuery('SELECT charity FROM civicrm_value_gift_aid_submission WHERE entity_id = %1',
        array(1 => array($contributionID, 'Integer'))
      );
    }

    // do a declaration fetch again, in order to get the declaration id
    $declaration = GiftAid_Utils_GiftAid::getDeclaration($contactID, $date, $charity);

    // now use declaration id to fetch charity
    $sql = "SELECT " . CIVICRM_GIFTAID_CHARITY_DECLARATION_CF_NAME . " as charity
FROM civicrm_value_gift_aid_declaration
WHERE  id = %1";
    $declaredCharity = CRM_Core_DAO::singleValueQuery($sql, array(1 => array($declaration['id'], 'Integer')));

    // if declaration has charity set AND donation doesn't have same charity specified,
    // set the eligibility to false
    if ($declaredCharity) {
      require_once 'CRM/Dedupe/Finder.php';
      require_once 'CRM/Core/BAO/CustomGroup.php';
      $infoGroupTree = CRM_Core_BAO_CustomGroup::getTree('Contribution',
        CRM_Core_DAO::$_nullObject,
        $contributionID,
        $cgID
      );
      $infoGroupTree = CRM_Core_BAO_CustomGroup::formatGroupTree($infoGroupTree, 1, CRM_Core_DAO::$_nullObject);

      foreach ($infoGroupTree as $gId => $groupTree) {
        foreach ($groupTree['fields'] as $fId => $fieldTree) {
          if ($fieldTree['column_name'] == CIVICRM_GIFTAID_CHARITY_SUBMISSION_CF_NAME &&
            $declaredCharity != $fieldTree['element_value']
          ) {
            $isEligible = FALSE;
            break;
          }
        }
      }
    }
  }

  if ($isEligible && $contributionID &&
    CIVICRM_GIFTAID_NOT_ELIGIBLE_CONTRIBUTION_TYPES
  ) {

    // ******** Contribution types automatically set as not eligable for gift aid ********** //

    // get financial account.
    $query = "SELECT financial_account.name 
FROM  civicrm_contribution contribution
INNER JOIN civicrm_financial_account financial_account ON ( contribution.financial_account_id = financial_account.id )
WHERE contribution.id = %1";

    $params = array(1 => array($contributionID, 'Integer'));
    $contributionType = CRM_Core_DAO::singleValueQuery($query, $params);
    $notEligibleContributionTypes = explode(',', CIVICRM_GIFTAID_NOT_ELIGIBLE_CONTRIBUTION_TYPES);
    foreach ($notEligibleContributionTypes as & $type) {
      $type = trim($type);
    }

    $isEligible = in_array($contributionType, $notEligibleContributionTypes) ? FALSE : $isEligible;
  }
}

function _civicrm_giftaid_getCustomGroupID($customGroupName) {
  require_once 'CRM/Utils/Type.php';
  $customGroupName = CRM_Utils_Type::escape($customGroupName, 'String');
  return CRM_Core_DAO::getFieldValue("CRM_Core_DAO_CustomGroup", $customGroupName, 'id', 'name');
}

