<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.5                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2014                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2014
 * $Id$
 *
 */

// ** REGSITE settings **
define('REGSITE_PROFILE_ID', 15);
define('EMPOYER_RELATIONSHIP_TYPE_ID', 4);
define('REGSITE_INDIVIDUAL_GROUP', 16);

define('CIVICRM_REGSITE_FROM_EMAIL', "CiviCRM Site Registration <info@civicrm.org>");
define('CIVICRM_SURVEY_FROM_EMAIL', "CiviCRM Training <info@civicrm.org>");
define('CIVICRM_ARCHIVE_EMAIL', "CiviCRM Email Archival <archive@civicrm.org>");

// ** SURVEY settings **
// =======================
define('CIVICRM_EVENT_SURVEY_CG_TITLE', 'Event_Survey');
// Note: Don't forget to change name of the event type in xml data file
// when you change the event type id below
define('CIVICRM_EVENT_SURVEY_EVENT_TYPE_ID', 3);
// Note: Don't forget to change name of the template directory
// when you change the profile id below
define('CIVICRM_EVENT_SURVEY_PROFILE_ID', 9);
function civicrm_regsite_civicrm_config(&$config) {
  $template = &CRM_Core_Smarty::singleton();

  $regsiteRoot = dirname(__FILE__) . DIRECTORY_SEPARATOR;

  $regsiteDir = $regsiteRoot . 'templates';

  if (is_array($template->template_dir)) {
    array_unshift($template->template_dir, $regsiteDir);
  }
  else {
    $template->template_dir = array($regsiteDir, $template->template_dir);
  }

  // also fix php include path
  $include_path = $regsiteRoot . PATH_SEPARATOR . get_include_path();
  set_include_path($include_path);

  // set the timezone
  date_default_timezone_set('America/Los_Angeles');
}

function civicrm_regsite_civicrm_buildForm($formName, &$form) {
  if ($formName == 'CRM_Profile_Form_Edit') {
    if ($form->getVar('_gid') == REGSITE_PROFILE_ID) {
      _civicrm_regsite_civicrm_buildForm_Profile_RegSite($form);
    }
    elseif ($form->getVar('_gid') == CIVICRM_EVENT_SURVEY_PROFILE_ID) {
      _event_survey_civicrm_buildForm_Profile($formName, $form);
    }
  }
}

function &_civicrm_regsite_get_permissioned_contacts($orgID) {
  $sql = "
SELECT     c.first_name, c.last_name, c.display_name, e.email
FROM       civicrm_contact c
INNER JOIN civicrm_email e on e.contact_id = c.id
INNER JOIN civicrm_relationship r on r.contact_id_a = c.id
WHERE r.contact_id_b = %1
AND   r.relationship_type_id = %2
AND   r.is_active = 1
AND   r.is_permission_a_b = 1
AND   e.is_primary = 1
";
  $params = array(1 => array($orgID, 'Integer'),
    2 => array(EMPOYER_RELATIONSHIP_TYPE_ID, 'Integer'),
  );
  return CRM_Core_DAO::executeQuery($sql, $params);
}

function _civicrm_regsite_civicrm_buildForm_Profile_RegSite(&$form) {
  // add first name, last name and email
  $attributes = CRM_Core_DAO::getAttribute('CRM_Contact_DAO_Contact');

  // first_name
  $form->add('text', 'regsite_first_name', ts('First Name'), $attributes['first_name'], TRUE);

  // last_name
  $form->add('text', 'regsite_last_name', ts('Last Name'), $attributes['last_name'], TRUE);

  // email
  $form->add('text', 'regsite_email', ts('Email'), $attributes['first_name'], TRUE);

  $defaults = array();

  // also set the default appropriately
  // if logged in user, use logged in users name and email
  $session = &CRM_Core_Session::singleton();
  $contactID = $session->get('userID');
  if ($contactID) {
    $params = array('contact_id' => $contactID,
      'return.first_name' => 1,
      'return.last_name' => 1,
      'return.email' => 1,
      'version' => 3,
    );

    require_once 'api/api.php';
    $contact = civicrm_api('contact', 'get', $params);
    if (!civicrm_error($contact)) {
      $defaults['regsite_first_name'] = CRM_Utils_Array::value('first_name', $contact['values'][$contactID]);
      $defaults['regsite_last_name'] = CRM_Utils_Array::value('last_name', $contact['values'][$contactID]);
      $defaults['regsite_email'] = CRM_Utils_Array::value('email', $contact['values'][$contactID]);
    }
  }

  $orgID = $form->getVar('_id');
  if (empty($defaults) &&
    $orgID
  ) {
    $dao = &_civicrm_regsite_get_permissioned_contacts($orgID);

    // and then check for all permissioned relatioships in that org
    if ($dao->fetch()) {
      $defaults['regsite_first_name'] = $dao->first_name;
      $defaults['regsite_last_name'] = $dao->last_name;
      $defaults['regsite_email'] = $dao->email;
    }
  }

  $form->setDefaults($defaults);
}

function civicrm_regsite_civicrm_postProcess($class, &$form) {
  if (is_a($form, 'CRM_Profile_Form_Edit')) {
    $gid = $form->getVar('_gid');
    if ($form->getVar('_gid') == REGSITE_PROFILE_ID) {
      _civicrm_regsite_civicrm_postProcess_Profile_RegSite($form);
    }
    elseif ($form->getVar('_gid') == CIVICRM_EVENT_SURVEY_PROFILE_ID) {
      _event_survey_civicrm_postProcess_Profile($class, $form);
    }
  }
}

function _civicrm_regsite_civicrm_postProcess_Profile_RegSite(&$form) {
  $params = $form->controller->exportValues($form->getName());

  // first create the contact from the name and email
  $orgContactParams = array('first_name' => CRM_Utils_Array::value('regsite_first_name', $params),
    'last_name' => CRM_Utils_Array::value('regsite_last_name', $params),
    'email' => CRM_Utils_Array::value('regsite_email', $params),
  );

  $dedupeParams = CRM_Dedupe_Finder::formatParams($orgContactParams, 'Individual');
  $dedupeParams['check_permission'] = FALSE;
  $dupeIDs = CRM_Dedupe_Finder::dupesByParams($dedupeParams, 'Individual', 'Unsupervised');

  $contactID = NULL;
  if (is_array($dupeIDs) && !empty($dupeIDs)) {
    $contactID = array_pop($dupeIDs);
  }

  $orgContactParams['email'] = array();
  $orgContactParams['email'][1] = array();
  $orgContactParams['email'][1]['email'] = CRM_Utils_Array::value('regsite_email', $params);
  $orgContactParams['email'][1]['is_primary'] = 1;
  $orgContactParams['email'][1]['location_type_id'] = 3;
  $contactID = CRM_Contact_BAO_Contact::createProfileContact($orgContactParams,
    CRM_Core_DAO::$_nullArray,
    $contactID
  );

  // now lets add the contact to the group as specified in the constants
  $groupParams = array('contact_id' => $contactID,
    'group_id' => REGSITE_INDIVIDUAL_GROUP,
    'version' => 3,
  );
  require_once 'api/api.php';
  civicrm_api('GroupContact', 'create', $groupParams);

  // check that there is a employee / employer relationship between the two
  // and if so permission that relationship, if no create it
  $relationship = new CRM_Contact_DAO_Relationship();
  $relationship->contact_id_a = $contactID;
  $relationship->contact_id_b = $form->getVar('_id');
  $relationship->relationship_type_id = EMPOYER_RELATIONSHIP_TYPE_ID;

  $relationship->selectAdd();
  $relationship->selectAdd('id, is_active, is_permission_a_b');
  $relationship->find(TRUE);

  $relationship->is_active = 1;
  $relationship->is_permission_a_b = 1;
  $relationship->save();

  $smarty = &CRM_Core_Smarty::singleton();

  // lets get the profile values
  require_once 'CRM/Core/BAO/UFGroup.php';
  $smartyParams = array();

  $smartyParams['organizationName'] = CRM_Utils_Array::value('organization_name', $params);
  $smartyParams['contactName'] = "{$params['regsite_first_name']} {$params['regsite_last_name']} ({$params['regsite_email']})";

  $profileValues = array();
  CRM_Core_BAO_UFGroup::getValues($form->getVar('_id'),
    $form->getVar('_fields'),
    $profileValues
  );

  // create a hashLink
  $orgID = $form->getVar('_id');
  $smartyParams['hashLink'] = CRM_Utils_System::url('civicrm/profile/edit',
    "reset=1&id=$orgID&gid=" . REGSITE_PROFILE_ID .
    "&cs=" .
    CRM_Contact_BAO_Contact_Utils::generateChecksum($orgID),
    TRUE, NULL, FALSE
  );

  $smarty->assign_by_ref('displayValues', $smartyParams);
  $smarty->assign_by_ref('profileValues', $profileValues);

  $subject = $smarty->fetch('Mail/RegSite/Subject.tpl');
  $body = $smarty->fetch('Mail/RegSite/Message.tpl');

  // now send email to both user and org
  $params = array('from' => CIVICRM_REGSITE_FROM_EMAIL,
    'toName' => "{$params['regsite_first_name']} {$params['regsite_last_name']}",
    'toEmail' => CRM_Utils_Array::value('regsite_email', $params),
    'cc' => CRM_Utils_Array::value('email-Primary', $params),
    'bcc' => CIVICRM_ARCHIVE_EMAIL,
    'subject' => $subject,
    'text' => $body,
  );

  require_once 'CRM/Utils/Mail.php';
  CRM_Utils_Mail::send($params);
}

function civicrm_regsite_civicrm_pageRun(&$page) {
  $name = $page->getVar('_name');
  if ($name == 'CRM_Profile_Page_Dynamic') {
    if ($page->getVar('_gid') == REGSITE_PROFILE_ID) {
      return _civicrm_regsite_civicrm_pageRun_Profile_RegSite($page);
    }
    elseif ($page->getVar('_gid') == CIVICRM_EVENT_SURVEY_PROFILE_ID) {
      _event_survey_civicrm_pageRun_Profile($page);
    }
  }
}

function _civicrm_regsite_civicrm_pageRun_Profile_RegSite(&$page) {
  // get the id of the org
  $orgID = $page->getVar('_id');

  $dao = &_civicrm_regsite_get_permissioned_contacts($orgID);

  $names = array();
  while ($dao->fetch()) {
    $names[] = "{$dao->display_name} ({$dao->email})";
  }

  if (!empty($names)) {
    $contactPersonString = implode(', ', $names);
    $page->assign('contactPersonString', $contactPersonString);
  }
}

function civicrm_regsite_civicrm_links($op, $objectName, $objectId, &$links) {
  if ($op != 'view.contact.userDashBoard') {
    return;
  }

  // take the update link and move it to the profile
  $links[CRM_Core_Action::UPDATE]['url'] = 'civicrm/profile/edit';
  $links[CRM_Core_Action::UPDATE]['qs'] = "reset=1&gid=" . REGSITE_PROFILE_ID . "&id=%%cbid%%";

  return $links;
}

function _event_survey_civicrm_buildForm_Profile($formName, &$form) {
  $cgID = _event_survey_civicrm_getCustomGroupID(CIVICRM_EVENT_SURVEY_CG_TITLE);
  if (empty($cgID)) {
    return;
  }
  require_once 'CRM/Core/BAO/CustomGroup.php';
  $groupTree = &CRM_Core_BAO_CustomGroup::getTree('Participant',
    $form,
    NULL,
    $cgID,
    CIVICRM_EVENT_SURVEY_EVENT_TYPE_ID
  );
  // simplified formatted groupTree
  $groupTree = CRM_Core_BAO_CustomGroup::formatGroupTree($groupTree, 1, $form);
  CRM_Core_BAO_CustomGroup::buildQuickForm($form, $groupTree, FALSE, 'event_survey_');

  if (isset($groupTree) && is_array($groupTree)) {
    $participantId = CRM_Utils_Request::retrieve('pid', 'Positive', $form, TRUE, 0, 'REQUEST');
    $contactId = CRM_Core_DAO::getFieldValue("CRM_Event_DAO_Participant", $participantId, 'contact_id');
    $form->setVar('_id', $contactId);
  }
}

function _event_survey_civicrm_postProcess_Profile($class, &$form) {
  $cgID = _event_survey_civicrm_getCustomGroupID(CIVICRM_EVENT_SURVEY_CG_TITLE);
  if (empty($cgID)) {
    return;
  }
  require_once 'CRM/Core/BAO/CustomGroup.php';
  $groupTree = &CRM_Core_BAO_CustomGroup::getTree('Participant',
    $form,
    NULL,
    $cgID,
    CIVICRM_EVENT_SURVEY_EVENT_TYPE_ID
  );
  // simplified formatted groupTree
  $groupTree = CRM_Core_BAO_CustomGroup::formatGroupTree($groupTree, 1, $form);

  if (isset($groupTree) && is_array($groupTree)) {
    $participantId = CRM_Utils_Request::retrieve('pid', 'Positive', $form, TRUE, 0, 'REQUEST');

    $params = $form->controller->exportValues($form->getVar('_name'));
    require_once 'CRM/Core/BAO/CustomValueTable.php';
    CRM_Core_BAO_CustomValueTable::postProcess($params,
      $groupTree[$cgID]['fields'],
      'civicrm_participant',
      $participantId,
      'Participant'
    );
    // mailing part
    $smarty = &CRM_Core_Smarty::singleton();
    $smarty->assign_by_ref('profileValues', $params);

    $subject = $smarty->fetch('Mail/Survey/Subject.tpl');
    $body = $smarty->fetch('Mail/Survey/Message.tpl');

    // now send email to both user and org
    $params = array('from' => CIVICRM_REGSITE_FROM_EMAIL,
      'toName' => "{$params['first_name']} {$params['last_name']}",
      'toEmail' => $params['email-Primary'],
      'bcc' => CIVICRM_ARCHIVE_EMAIL,
      'subject' => $subject,
      'text' => $body,
    );
    require_once 'CRM/Utils/Mail.php';
    CRM_Utils_Mail::send($params);

    return CRM_Utils_System::redirect(CRM_Utils_System::url('civicrm/profile/view',
        "reset=1&gid=" . $form->getVar('_gid') .
        "&id=" . $form->getVar('_id') .
        "&pid=" . $participantId
      ));
  }
}

function _event_survey_civicrm_pageRun_Profile(&$page) {
  $cgID = _survey_civicrm_getCustomGroupID(CIVICRM_EVENT_SURVEY_CG_TITLE);
  if (empty($cgID)) {
    return;
  }
  $participantId = CRM_Utils_Request::retrieve('pid', 'Positive', $page, TRUE, 0, 'REQUEST');
  $contactID = $page->getVar('_id');

  require_once 'CRM/Core/BAO/CustomGroup.php';
  $groupTree = &CRM_Core_BAO_CustomGroup::getTree('Participant',
    $form,
    $participantId,
    $cgID,
    CIVICRM_EVENT_SURVEY_EVENT_TYPE_ID
  );
  CRM_Core_BAO_CustomGroup::buildCustomDataView($page,
    $groupTree,
    FALSE, NULL,
    'event_survey_'
  );
}

function _event_survey_civicrm_getCustomGroupID($customGroupName) {
  require_once 'CRM/Utils/Type.php';
  $customGroupName = CRM_Utils_Type::escape($customGroupName, 'String');
  return CRM_Core_DAO::getFieldValue("CRM_Core_DAO_CustomGroup", $customGroupName, 'id', 'name');
}

