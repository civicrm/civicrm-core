diff --git a/CRM/Contact/BAO/Contact/Utils.php b/CRM/Contact/BAO/Contact/Utils.php
index f3b391362af..465d5e2c33f 100644
--- a/CRM/Contact/BAO/Contact/Utils.php
+++ b/CRM/Contact/BAO/Contact/Utils.php
@@ -825,7 +825,7 @@ public static function processSharedAddress(&$address) {
     // Normal update process will automatically create new address with submitted values
 
     // 1. loop through entire submitted address array
-    $skipFields = array('is_primary', 'location_type_id', 'is_billing', 'master_id');
+    $skipFields = array('is_primary', 'location_type_id', 'is_billing', 'master_id', 'update_current_employer');
     foreach ($address as & $values) {
       // 2. check if "Use another contact's address" is checked, if not continue
       // Additionally, if master_id is set (address was shared), set master_id to empty value.
diff --git a/CRM/Contact/Form/Edit/Address.php b/CRM/Contact/Form/Edit/Address.php
index 027fbe253ff..33bccbbe094 100644
--- a/CRM/Contact/Form/Edit/Address.php
+++ b/CRM/Contact/Form/Edit/Address.php
@@ -164,6 +164,9 @@ public static function buildQuickForm(&$form, $addressBlockCount = NULL, $sharin
       // shared address
       $form->addElement('checkbox', "address[$blockId][use_shared_address]", NULL, ts('Use another contact\'s address'));
 
+      // do we want to update employer for shared address
+      $form->addElement('checkbox', "address[$blockId][update_current_employer]", NULL, ts('Set this organization as current employer'));
+
       // Override the default profile links to add address form
       $profileLinks = CRM_Core_BAO_UFGroup::getCreateLinks(array(
           'new_individual',
@@ -249,6 +252,7 @@ public static function setDefaultValues(&$defaults, &$form) {
       // start of contact shared adddress defaults
       $sharedAddresses = array();
       $masterAddress = array();
+      $isPotentialEmployer = array();
 
       // get contact name of shared contact names
       $shareAddressContactNames = CRM_Contact_BAO_Contact_Utils::getAddressShareContactNames($defaults['address']);
@@ -266,6 +270,18 @@ public static function setDefaultValues(&$defaults, &$form) {
             'master_id' => $addressValue['master_id'],
           );
           $defaults['address'][$key]['master_contact_id'] = $master_cid;
+
+          // is it a potential case of employee/employer ?
+          $contactType1 = CRM_Contact_BAO_Contact::getContactType($form->_contactId);
+          $contactType2 = CRM_Contact_BAO_Contact::getContactType($master_cid);
+
+          if ($contactType1 == 'Individual' && $contactType2 == 'Organization') {
+            $isPotentialEmployer[$key] = 1;
+            // when editing an existing shared address, assume that we don't want to update current employer
+            $defaults['address'][$key]['update_current_employer'] = 0;
+            // TODO: replace input label to include employer name
+            //$employer = CRM_Contact_BAO_Contact::displayName($master_cid);
+          }
         }
         else {
           $defaults['address'][$key]['use_shared_address'] = 0;
@@ -277,6 +293,7 @@ public static function setDefaultValues(&$defaults, &$form) {
 
       $form->assign('sharedAddresses', $sharedAddresses);
       $form->assign('masterAddress', $masterAddress);
+      $form->assign('isPotentialEmployer', $isPotentialEmployer);
       // end of shared address defaults
 
       // start of parse address functionality
diff --git a/CRM/Contact/Page/AJAX.php b/CRM/Contact/Page/AJAX.php
index 8270d7b753a..cd66bdbfac5 100644
--- a/CRM/Contact/Page/AJAX.php
+++ b/CRM/Contact/Page/AJAX.php
@@ -1013,6 +1013,21 @@ public static function getAddressDisplay() {
     CRM_Utils_JSON::output($addressVal);
   }
 
+  public static function isPotentialEmployer() {
+    $contactId = CRM_Utils_Request::retrieve('contact_id', 'Positive');
+    $orgId = CRM_Utils_Request::retrieve('org_id', 'Positive');
+    $employer = False;
+    if ($contactId && $orgId) {
+      $contactType1 = CRM_Contact_BAO_Contact::getContactType($contactId);
+      $contactType2 = CRM_Contact_BAO_Contact::getContactType($orgId);
+      if ($contactType1 == 'Individual' && $contactType2 == 'Organization') {
+        $employer = CRM_Contact_BAO_Contact::displayName($orgId);
+      }
+    }
+    CRM_Utils_JSON::output($employer);
+
+  }
+
   /**
    * Mark dupe pairs as selected from un-selected state or vice-versa, in dupe cache table.
    */
diff --git a/CRM/Core/BAO/Address.php b/CRM/Core/BAO/Address.php
index 338712adfba..58599dbaaf2 100644
--- a/CRM/Core/BAO/Address.php
+++ b/CRM/Core/BAO/Address.php
@@ -1042,11 +1042,21 @@ public static function processSharedAddress($addressId, $params) {
     $query = 'SELECT id, contact_id FROM civicrm_address WHERE master_id = %1';
     $dao = CRM_Core_DAO::executeQuery($query, array(1 => array($addressId, 'Integer')));
 
+    // TODO: VALIDATION REQUIRED = was implicit and is now explicit
+    // should we keep it backward compatible (i.e. no params means creating relationship) ?
+    // this should only impact API calls
+    $createRelationship = FALSE;
+    if (isset($params['update_current_employer']) && $params['update_current_employer']) {
+      $createRelationship = TRUE;
+    }
+
     // unset contact id
     $skipFields = array('is_primary', 'location_type_id', 'is_billing', 'contact_id');
     if (isset($params['master_id']) && !CRM_Utils_System::isNull($params['master_id'])) {
-      // call the function to create a relationship for the new shared address
-      self::processSharedAddressRelationship($params['master_id'], $params['contact_id']);
+      if ($createRelationship) {
+        // call the function to create a relationship for the new shared address
+        self::processSharedAddressRelationship($params['master_id'], $params['contact_id']);
+      }
     }
     else {
       // else no new shares will be created, only update shared addresses
@@ -1059,7 +1069,7 @@ public static function processSharedAddress($addressId, $params) {
     $addressDAO = new CRM_Core_DAO_Address();
     while ($dao->fetch()) {
       // call the function to update the relationship
-      if (isset($params['master_id']) && !CRM_Utils_System::isNull($params['master_id'])) {
+      if ($createRelationship && isset($params['master_id']) && !CRM_Utils_System::isNull($params['master_id'])) {
         self::processSharedAddressRelationship($params['master_id'], $dao->contact_id);
       }
       $addressDAO->copyValues($params);
diff --git a/templates/CRM/Contact/Form/Contact.hlp b/templates/CRM/Contact/Form/Contact.hlp
index 54f9695d2e6..2674a18719f 100644
--- a/templates/CRM/Contact/Form/Contact.hlp
+++ b/templates/CRM/Contact/Form/Contact.hlp
@@ -75,6 +75,9 @@
 <p>{ts}Check this option if you want to link this address to another contact's address. For example, you might want to link a person's "Work" address to their employer's address. Or, you might want to link their "Home" address to a Household record. Changes made to the linked address will automatically be applied to this address. For example, if you use an employer (organization) address for an individual's work address - any updates to the employer address will also be applied to the individual's work address.{/ts}</p>
 <p>{ts}You can use an address belonging to an existing contact or create a new contact by selecting the desired contact type from the select field. If you link an individual's address to an organization, an employee-employer relationship will be automatically created. If you link an individual's address to a household, a household member relationship is created.{/ts}</p>
 {/htxt}
+{htxt id="id-sharedAddress-updateRelationships"}
+<p>{ts}Check this option if you want to DISABLE any current employer relationship for this contact and replace the employer by this one{/ts}</p>
+{/htxt}
 
 {htxt id="id-communication_style-title"}
   {ts}Communication Style{/ts}
diff --git a/templates/CRM/Contact/Form/ShareAddress.tpl b/templates/CRM/Contact/Form/ShareAddress.tpl
index af34e82c017..b973dd298f6 100644
--- a/templates/CRM/Contact/Form/ShareAddress.tpl
+++ b/templates/CRM/Contact/Form/ShareAddress.tpl
@@ -40,6 +40,13 @@
           {/foreach}
         {/if}
       </div>
+      <div class="shared-address-update-employer">
+        {capture name="update_employer_help"}{help id="id-sharedAddress-updateRelationships" file="CRM/Contact/Form/Contact.hlp"}{/capture}
+        {if $isPotentialEmployer.$blockId}
+          {$form.address.$blockId.update_current_employer.html} {$smarty.capture.update_employer_help}<br/>
+        {/if}
+      </div>
+
     </div>
   </td>
 </tr>
@@ -50,6 +57,7 @@
   CRM.$(function($) {
     var blockNo = {/literal}{$blockId}{literal},
       $contentArea = $('#shared-address-' + blockNo + ' .shared-address-list'),
+      $contentAreaUpdate = $('#shared-address-' + blockNo + ' .shared-address-update-employer'),
       $masterElement = $('input[name="address[' + blockNo + '][master_id]"]');
 
     function showHideSharedAddress() {
@@ -73,45 +81,69 @@
         sharedContactId = $el.val();
 
       $contentArea.html('');
+      $contentAreaUpdate.html('');
       $masterElement.val('');
 
       if (!sharedContactId || isNaN(sharedContactId)) {
         return;
       }
 
+      // first, find out if the shared address could be an implicit employer/employee relationship
       $.post(CRM.url('civicrm/ajax/inline'), {
-          'contact_id': sharedContactId,
+          'contact_id': {/literal}{$contactId}{literal},
+          'org_id': sharedContactId,
           'type': 'method',
           'class_name': 'CRM_Contact_Page_AJAX',
-          'fn_name': 'getAddressDisplay'
+          'fn_name': 'isPotentialEmployer'
         },
-        function(response) {
+        function(resp) {
           // Avoid race conditions - check that value hasn't been changed by the user while we were waiting for response
-          if (response && $el.val() === sharedContactId) {
-            var selected = ' checked="checked"',
-              addressHTML = '';
-
-            $.each(response, function(i, val) {
-              if (addressHTML) {
-                selected = '';
-              } else {
-                $('input[name="address[' + blockNo + '][master_id]"]').val(val.id);
-              }
-              var name = 'selected_shared_address-'+ blockNo,
-                id = name + '-' + val.id;
-              addressHTML += '<input type="radio" name="' + name + '" id="' + id + '" value="' + val.id + '"' + selected +'><label for="' + id + '">' + val.display_text + '</label>('+val.location_type+')<br/>';
-            });
-
-            if (!addressHTML) {
-              addressHTML = {/literal}"{ts escape='js'}Selected contact does not have an address. Please edit that contact to add an address, or select a different contact.{/ts}"{literal};
-            }
-
-            $contentArea.html(addressHTML);
+          if ($el.val() === sharedContactId) {
+            var employerName = resp;
+
+            $.post(CRM.url('civicrm/ajax/inline'), {
+                'contact_id': sharedContactId,
+                'type': 'method',
+                'class_name': 'CRM_Contact_Page_AJAX',
+                'fn_name': 'getAddressDisplay'
+              },
+              function(response) {
+                // Avoid race conditions - check that value hasn't been changed by the user while we were waiting for response
+                if (response && $el.val() === sharedContactId) {
+                  var selected = ' checked="checked"',
+                    addressHTML = '';
+
+                  $.each(response, function(i, val) {
+                    if (addressHTML) {
+                      selected = '';
+                    } else {
+                      $('input[name="address[' + blockNo + '][master_id]"]').val(val.id);
+                    }
+                    var name = 'selected_shared_address-'+ blockNo,
+                      id = name + '-' + val.id;
+                    addressHTML += '<input type="radio" name="' + name + '" id="' + id + '" value="' + val.id + '"' + selected +'><label for="' + id + '">' + val.display_text + '</label>('+val.location_type+')<br/>';
+                  });
+
+                  if (!addressHTML) {
+                    addressHTML = {/literal}"{ts escape='js'}Selected contact does not have an address. Please edit that contact to add an address, or select a different contact.{/ts}"{literal};
+                  }
+                  else {
+                    if (employerName) {
+                      name = 'address[' + blockNo + '][update_current_employer]';
+                      var display_text = ts('Set %1 as current employer', {1: employerName});
+                      updateHTML = '<input type="checkbox" name="' + name + '" id="' + name + '" value="1" checked="checked"><label for="' + name + '">' + display_text + '</label> ' + {/literal}'{$smarty.capture.update_employer_help|escape:'javascript'}'{literal} + '<br/>';
+                      $contentAreaUpdate.html(updateHTML);
+                    }
+                  }
+
+                  $contentArea.html(addressHTML);
+                }
+              },'json');
           }
+
         },'json');
+
     });
   });
 </script>
 {/literal}
-
-
