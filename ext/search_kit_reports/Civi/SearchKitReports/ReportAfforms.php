<?php

namespace Civi\SearchKitReports;

use Civi\Core\Event\GenericHookEvent;
use Civi\Core\Service\AutoSubscriber;

use CRM_SearchKitReports_ExtensionUtil as E;

class ReportAfforms extends AutoSubscriber {

  public static function getSubscribedEvents() {
    return [
      'civi.afform.get' => 'onGetAfforms',
      // note: we want to hook in after the default "fallback" display
      // has been provided - just to make small tweak
      'civi.search.defaultDisplay' => ['alterDefaultSearchDisplay', -50],
    ];
  }

  /**
   * Enable toggle columns on the default search display for
   * some searches used as Reports
   *
   * TODO: this is a bit convoluted - maybe we could just enable
   * by default on *all* default search displays?
   */
  public function alterDefaultSearchDisplay(GenericHookEvent $e): void {
    $savedSearchId = $e->savedSearch['id'];

    if (!$savedSearchId) {
      return;
    }

    $isTaggedReport = \Civi\Api4\EntityTag::get(FALSE)
      ->addWhere('tag_id:name', '=', 'SearchKitReport')
      ->addWhere('entity_id', '=', $savedSearchId)
      ->addWhere('entity_table', '=', 'civicrm_saved_search')
      ->execute()
      ->first();

    if ($isTaggedReport) {
      $e->display['settings']['toggleColumns'] = TRUE;
      return;
    }

  }

  public function onGetAfforms(GenericHookEvent $e) : void {
    $reportSearches = \Civi\Api4\SavedSearch::get(FALSE)
      ->addWhere('tags:name', 'IN', 'SearchKitReport')
      // templates are excluded by default otherwise
      ->addWhere('is_template', 'IN', [TRUE, FALSE])
      ->addSelect('name', 'label', 'api_params', 'base_module');

    if ($e->getNames) {
      // if we are searching for specific forms, check those that match the afreport
      // prefix
      $afreportNames = array_filter($e->getNames['name'] ?? [], fn($name) => \str_starts_with($name, 'afreport'));
      if (!$afreportNames) {
        // if no afreports we can return early
        return;
      }
      // afreportMySearch => MySearch
      $searchNames = array_map(fn ($afreportName) => \substr($afreportName, 8), $afreportNames);
      $reportSearches->addWhere('name', 'IN', $searchNames);
    }

    foreach ($reportSearches->execute() as $search) {
      $searchName = $search['name'];
      $afformName = 'afreport' . $searchName;
      // use the default display
      // TODO: enable the column picker
      $displayName = '';

      $label = $search['label'];

      $e->afforms[$afformName] = [
        'name' => $afformName,
        'type' => 'search',
        'title' => E::ts('%1 Report', [1 => $label]),
        'server_route' => 'civicrm/reports/' . $searchName,
        'placement' => ['reports', 'dashlet'],
         // only render the layout if required
        'layout' => $e->getLayout ? $this->getLayout($searchName, $displayName) : NULL,
        // if the search comes from an extension, show that as the base module
        // otherwise show as generated by Search Kit Reports
        'base_module' => $search['base_module'] ?: E::LONG_NAME,
      ];
    }

  }

  private function getLayout(string $savedSearchName, string $searchDisplayName) {
    $fieldDefns = $this->getFilterFieldDefns($savedSearchName);
    return \CRM_Core_Smarty::singleton()->fetchWith('afform/ReportTable.tpl', [
      'savedSearch' => $savedSearchName,
      'searchDisplay' => $searchDisplayName,
      'fieldDefns' => $fieldDefns,
    ]);
  }

  /**
   * Get name => label array of fields to include as filters on the
   * afform
   *
   * Currently this just fetches all the columns from the default
   * SearchDisplay
   */
  private function getFilterFieldDefns(string $savedSearchName): array {
    $filters = [];

    $display = \Civi\Api4\SearchDisplay::getDefault(FALSE)
      ->setSavedSearch($savedSearchName)
      ->addSelect('settings')
      ->execute()
      ->first();

    foreach ($display['settings']['columns'] ?? [] as $column) {
      if (empty($column['key']) || empty($column['label'])) {
        // skip keyless columns
        continue;
      }
      // remove pseudosuffixes to get the base field name
      $fieldName = explode(':', $column['key'])[0];
      $filters[$fieldName] = array_filter([
        'label' => $column['label'],
      ]);
    }
    return $filters;
  }

}
