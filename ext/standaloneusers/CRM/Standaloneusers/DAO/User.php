<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from standaloneusers/xml/schema/CRM/Standaloneusers/User.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:5a36926dd2c3d68eb325cc1f10961b29)
 */
use CRM_Standaloneusers_ExtensionUtil as E;

/**
 * Database access object for the User entity.
 */
class CRM_Standaloneusers_DAO_User extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_user';

  /**
   * Field to show when displaying a record.
   *
   * @var string
   */
  public static $_labelField = 'username';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique User ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * FK to Contact
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $contact_id;

  /**
   * @var string
   *   (SQL type: varchar(60))
   *   Note that values will be retrieved from the database as a string.
   */
  public $username;

  /**
   * Hashed password
   *
   * @var string
   *   (SQL type: varchar(128))
   *   Note that values will be retrieved from the database as a string.
   */
  public $password;

  /**
   * Email (e.g. for password resets)
   *
   * @var string
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $email;

  /**
   * @var string|null
   *   (SQL type: timestamp)
   *   Note that values will be retrieved from the database as a string.
   */
  public $when_created;

  /**
   * @var string|null
   *   (SQL type: timestamp)
   *   Note that values will be retrieved from the database as a string.
   */
  public $when_last_accessed;

  /**
   * @var string|null
   *   (SQL type: timestamp)
   *   Note that values will be retrieved from the database as a string.
   */
  public $when_updated;

  /**
   * @var bool|string
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $is_active;

  /**
   * User's timezone
   *
   * @var string
   *   (SQL type: varchar(32))
   *   Note that values will be retrieved from the database as a string.
   */
  public $timezone;

  /**
   * User's language
   *
   * @var string
   *   (SQL type: varchar(12))
   *   Note that values will be retrieved from the database as a string.
   */
  public $language;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_user';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Users') : E::ts('User');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'contact_id', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique User ID'),
          'required' => TRUE,
          'where' => 'civicrm_user.id',
          'table_name' => 'civicrm_user',
          'entity' => 'User',
          'bao' => 'CRM_Standaloneusers_DAO_User',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'contact_id' => [
          'name' => 'contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('FK to Contact'),
          'where' => 'civicrm_user.contact_id',
          'table_name' => 'civicrm_user',
          'entity' => 'User',
          'bao' => 'CRM_Standaloneusers_DAO_User',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'add' => NULL,
        ],
        'username' => [
          'name' => 'username',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Username'),
          'required' => TRUE,
          'maxlength' => 60,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_user.username',
          'table_name' => 'civicrm_user',
          'entity' => 'User',
          'bao' => 'CRM_Standaloneusers_DAO_User',
          'localizable' => 0,
          'add' => NULL,
        ],
        'password' => [
          'name' => 'password',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Password'),
          'description' => E::ts('Hashed password'),
          'required' => TRUE,
          'maxlength' => 128,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_user.password',
          'table_name' => 'civicrm_user',
          'entity' => 'User',
          'bao' => 'CRM_Standaloneusers_DAO_User',
          'localizable' => 0,
          'add' => NULL,
        ],
        'email' => [
          'name' => 'email',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Email'),
          'description' => E::ts('Email (e.g. for password resets)'),
          'required' => TRUE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_user.email',
          'table_name' => 'civicrm_user',
          'entity' => 'User',
          'bao' => 'CRM_Standaloneusers_DAO_User',
          'localizable' => 0,
          'add' => NULL,
        ],
        'when_created' => [
          'name' => 'when_created',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('When Created'),
          'where' => 'civicrm_user.when_created',
          'default' => 'CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_user',
          'entity' => 'User',
          'bao' => 'CRM_Standaloneusers_DAO_User',
          'localizable' => 0,
          'add' => NULL,
        ],
        'when_last_accessed' => [
          'name' => 'when_last_accessed',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('When Last Accessed'),
          'where' => 'civicrm_user.when_last_accessed',
          'table_name' => 'civicrm_user',
          'entity' => 'User',
          'bao' => 'CRM_Standaloneusers_DAO_User',
          'localizable' => 0,
          'add' => NULL,
        ],
        'when_updated' => [
          'name' => 'when_updated',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('When Updated'),
          'where' => 'civicrm_user.when_updated',
          'table_name' => 'civicrm_user',
          'entity' => 'User',
          'bao' => 'CRM_Standaloneusers_DAO_User',
          'localizable' => 0,
          'add' => NULL,
        ],
        'is_active' => [
          'name' => 'is_active',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'required' => TRUE,
          'where' => 'civicrm_user.is_active',
          'default' => '1',
          'table_name' => 'civicrm_user',
          'entity' => 'User',
          'bao' => 'CRM_Standaloneusers_DAO_User',
          'localizable' => 0,
          'add' => NULL,
        ],
        'timezone' => [
          'name' => 'timezone',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Timezone'),
          'description' => E::ts('User\'s timezone'),
          'required' => FALSE,
          'maxlength' => 32,
          'size' => CRM_Utils_Type::MEDIUM,
          'where' => 'civicrm_user.timezone',
          'table_name' => 'civicrm_user',
          'entity' => 'User',
          'bao' => 'CRM_Standaloneusers_DAO_User',
          'localizable' => 0,
          'add' => NULL,
        ],
        'language' => [
          'name' => 'language',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Language'),
          'description' => E::ts('User\'s language'),
          'required' => FALSE,
          'maxlength' => 12,
          'size' => CRM_Utils_Type::TWELVE,
          'where' => 'civicrm_user.language',
          'table_name' => 'civicrm_user',
          'entity' => 'User',
          'bao' => 'CRM_Standaloneusers_DAO_User',
          'localizable' => 0,
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'user', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'user', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'index_username' => [
        'name' => 'index_username',
        'field' => [
          0 => 'username',
        ],
        'localizable' => FALSE,
        'unique' => TRUE,
        'sig' => 'civicrm_user::1::username',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
