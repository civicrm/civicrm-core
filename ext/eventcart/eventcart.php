<?php

require_once 'eventcart.civix.php';
// phpcs:disable
use CRM_Eventcart_ExtensionUtil as E;
// phpcs:enable

/**
 * Implements hook_civicrm_config().
 *
 * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_config/
 */
function eventcart_civicrm_config(&$config) {
  if (isset(Civi::$statics[__FUNCTION__])) {
    return;
  }
  Civi::$statics[__FUNCTION__] = 1;
  Civi::dispatcher()->addListener('hook_civicrm_pageRun', 'CRM_Event_Cart_PageCallback::run');

  _eventcart_civix_civicrm_config($config);

  // If upgrading from an older version of CiviCRM (ie. when eventcart was part of core)
  //   the eventcart extension will have already been "installed".
  // If installing a new instance of CiviCRM the installer will never run because we currently
  //   add the enabled extension directly to the database.
  // The _config hook is one of the earliest hooks to run so we trigger a check here that will work
  //   in all circumstances that the extension could be installed but not.
  //   If we are missing the civicrm_event_carts table we trigger the installer.
  // @fixme This is a hack to make sure we run the installer on a core extension
  if (!CRM_Core_DAO::checkTableExists('civicrm_event_carts')) {
    $upgrader = _eventcart_civix_upgrader();
    // @fixme As a core extension the wrong path is generated by CRM_Event_Cart_Upgrader_Base::instance()
    //   Replacing realpath with E::path() fixes it here and we should consider updating civix to do the same.
    $upgrader->onInstall();
    if (is_callable([$upgrader, 'onPostInstall'])) {
      $upgrader->onPostInstall();
    }
  }
}

/**
 * Implements hook_civicrm_xmlMenu().
 *
 * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_xmlMenu
 */
function eventcart_civicrm_xmlMenu(&$files) {
  _eventcart_civix_civicrm_xmlMenu($files);
}

/**
 * Implements hook_civicrm_install().
 *
 * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_install
 */
function eventcart_civicrm_install() {
  _eventcart_civix_civicrm_install();
}

/**
 * Implements hook_civicrm_postInstall().
 *
 * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_postInstall
 */
function eventcart_civicrm_postInstall() {
  _eventcart_civix_civicrm_postInstall();
}

/**
 * Implements hook_civicrm_uninstall().
 *
 * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_uninstall
 */
function eventcart_civicrm_uninstall() {
  _eventcart_civix_civicrm_uninstall();
}

/**
 * Implements hook_civicrm_enable().
 *
 * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_enable
 */
function eventcart_civicrm_enable() {
  _eventcart_civix_civicrm_enable();
}

/**
 * Implements hook_civicrm_disable().
 *
 * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_disable
 */
function eventcart_civicrm_disable() {
  _eventcart_civix_civicrm_disable();
}

/**
 * Implements hook_civicrm_upgrade().
 *
 * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_upgrade
 */
function eventcart_civicrm_upgrade($op, CRM_Queue_Queue $queue = NULL) {
  return _eventcart_civix_civicrm_upgrade($op, $queue);
}

/**
 * Implements hook_civicrm_managed().
 *
 * Generate a list of entities to create/deactivate/delete when this module
 * is installed, disabled, uninstalled.
 *
 * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_managed
 */
function eventcart_civicrm_managed(&$entities) {
  _eventcart_civix_civicrm_managed($entities);
}

/**
 * Implements hook_civicrm_angularModules().
 *
 * Generate a list of Angular modules.
 *
 * Note: This hook only runs in CiviCRM 4.5+. It may
 * use features only available in v4.6+.
 *
 * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_angularModules
 */
function eventcart_civicrm_angularModules(&$angularModules) {
  _eventcart_civix_civicrm_angularModules($angularModules);
}

/**
 * Implements hook_civicrm_alterSettingsFolders().
 *
 * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_alterSettingsFolders
 */
function eventcart_civicrm_alterSettingsFolders(&$metaDataFolders = NULL) {
  _eventcart_civix_civicrm_alterSettingsFolders($metaDataFolders);
}

/**
 * Implements hook_civicrm_entityTypes().
 *
 * Declare entity types provided by this module.
 *
 * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_entityTypes
 */
function eventcart_civicrm_entityTypes(&$entityTypes) {
  _eventcart_civix_civicrm_entityTypes($entityTypes);
}
